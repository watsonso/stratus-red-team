{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Home Welcome to the documentation of Stratus Red Team! Check out: The User Guide , to get started The list of available attack techniques Demo of Stratus Red Team. Click to enlarge Motivation Behind Stratus Red Team When crafting and implementing threat detection rules, it is essential to have an easy way to execute granular attack techniques, to be able to validate that our detections work as expected. Think of Stratus Red Team as \" Atomic Red Team \u2122\", but focused on cloud. Stratus Red Team is a self-contained binary. You can use it to easily detonate offensive attack techniques against a live cloud environment. Sample usage - Stopping a CloudTrail Trail (Defense Evasion) stratus detonate aws.defense-evasion.cloudtrail-stop The attack techniques are mapped to MITRE ATT&CK .","title":"Home"},{"location":"#home","text":"Welcome to the documentation of Stratus Red Team! Check out: The User Guide , to get started The list of available attack techniques Demo of Stratus Red Team. Click to enlarge","title":"Home"},{"location":"#motivation-behind-stratus-red-team","text":"When crafting and implementing threat detection rules, it is essential to have an easy way to execute granular attack techniques, to be able to validate that our detections work as expected. Think of Stratus Red Team as \" Atomic Red Team \u2122\", but focused on cloud. Stratus Red Team is a self-contained binary. You can use it to easily detonate offensive attack techniques against a live cloud environment. Sample usage - Stopping a CloudTrail Trail (Defense Evasion) stratus detonate aws.defense-evasion.cloudtrail-stop The attack techniques are mapped to MITRE ATT&CK .","title":"Motivation Behind Stratus Red Team"},{"location":"comparison/","text":"Comparison With Other Tools Atomic Red Team by Red Canary Atomic Red Team\u2122 is library of tests mapped to the MITRE ATT&CK\u00ae framework. Security teams can use Atomic Red Team to quickly, portably, and reproducibly test their environments. In 2021, Atomic Red Team added support for Cloud TTPs. At the time of writing , Atomic Red Team has only 4 TTPs for AWS: AWS CloudTrail Changes AWS - Create a group and add a user to that group AWS - Create Access Key and Secret Key AWS - Create a new IAM user While Atomic Red Team is an awesome tool for endpoint security, it wasn't built purposely for cloud environments. In particular, it doesn't handle the prerequisite infrastructure and configuration necessary to detonate TTPs, and leaves that to the user. For instance, AWS - Create Access Key and Secret Key requires you to create an IAM user prior to detonating the attack. Stratus Red Team packages this prerequisite logic, so you can detonate attack techniques without having to create any infrastructure or cloud configuration manually. However, the attack technique format of Atomic Red Team is based on YAML , and it's therefore easier to add new TTPs, even if they are not in the core of Atomic Red Team. Leonidas by F-Secure (Nick Jones) Leonidas is a framework for executing attacker actions in the cloud. It provides a YAML-based format for defining cloud attacker tactics, techniques and procedures (TTPs) and their associated detection properties While Stratus Red Team and Leonidas have similar goals, their implementation is fundamentally different. Leonidas is a fully-fledged web application you deploy in your AWS account using Terraform, and then a CodePipeline pipeline. Then, you use \"Leo\", the test case orchestrator, to hit the web API and detonate attack techniques. Leonidas allows describing TTPs as YAML , making it easier to extend than Stratus Red Team. Leonidas does not handle prerequisites for detonating attack techniques. The attack techniques implemented by Leonidas are very granular, meaning it can be challenging to implement detection for them. See for instance: STS Get Caller Identity Leonidas comes with a set of suggested threat detection rules. However, as its attack techniques are very granular, it is practically impossible to use them as-is in a real production environment, as they would trigger many false positives. Stratus Red Team aims at being simpler to use (single binary) and does not require you to have prior infrastructure or configuration in your AWS account. Stratus Red Team focuses on a single thing: executing cloud attack tactics against a live environment, with minimal overhead. You can also use Stratus Red Team programmatically , from Go code, as a library. Pacu by Rhino Security Labs Pacu is an open-source AWS exploitation framework, designed for offensive security testing against cloud environments. Created and maintained by Rhino Security Labs, Pacu allows penetration testers to exploit configuration flaws within an AWS account, using modules to easily expand its functionality. Pacu is an offensive AWS exploitation framework, aimed at penetration testers. It implements various enumeration and exploitation methods, some straightforward and some advanced. For instance, lambda__backdoor_new_roles creates a Lambda function and a CloudWatch Event causing all future IAM roles created in an AWS account to be backdoored automatically. Pacu aims at being used against existing AWS infrastructure. Stratus Red Team is self-contained and does not necessitate prior infrastructure or configuration in your cloud environment. You can also use it programmatically , from Go code, as a library. Amazon GuardDuty Tester Amazon GuardDuty Tester is helpful to trigger GuardDuty findings. However, it is tightly coupled with GuardDuty and is a product-specific tool, even within the AWS ecosystem. If GuardDuty doesn't detect an attack technique, you won't find it in here. CloudGoat by Rhino Security Labs CloudGoat is Rhino Security Labs' \"Vulnerable by Design\" AWS deployment tool. It allows you to hone your cloud cybersecurity skills by creating and completing several \"capture-the-flag\" style scenarios. CloudGoat is focused on spinning up vulnerable AWS infrastructure, so that you can exploit it to find a flag through a complete exploitation chain. Use CloudGoat to: practice your AWS offensive security and enumeration skills. Use Stratus Red Team to: emulate adversary behavior in AWS to validate your threat detection.","title":"Stratus Red Team vs. Other Tools"},{"location":"comparison/#comparison-with-other-tools","text":"","title":"Comparison With Other Tools"},{"location":"comparison/#atomic-red-team-by-red-canary","text":"Atomic Red Team\u2122 is library of tests mapped to the MITRE ATT&CK\u00ae framework. Security teams can use Atomic Red Team to quickly, portably, and reproducibly test their environments. In 2021, Atomic Red Team added support for Cloud TTPs. At the time of writing , Atomic Red Team has only 4 TTPs for AWS: AWS CloudTrail Changes AWS - Create a group and add a user to that group AWS - Create Access Key and Secret Key AWS - Create a new IAM user While Atomic Red Team is an awesome tool for endpoint security, it wasn't built purposely for cloud environments. In particular, it doesn't handle the prerequisite infrastructure and configuration necessary to detonate TTPs, and leaves that to the user. For instance, AWS - Create Access Key and Secret Key requires you to create an IAM user prior to detonating the attack. Stratus Red Team packages this prerequisite logic, so you can detonate attack techniques without having to create any infrastructure or cloud configuration manually. However, the attack technique format of Atomic Red Team is based on YAML , and it's therefore easier to add new TTPs, even if they are not in the core of Atomic Red Team.","title":"Atomic Red Team by Red Canary"},{"location":"comparison/#leonidas-by-f-secure-nick-jones","text":"Leonidas is a framework for executing attacker actions in the cloud. It provides a YAML-based format for defining cloud attacker tactics, techniques and procedures (TTPs) and their associated detection properties While Stratus Red Team and Leonidas have similar goals, their implementation is fundamentally different. Leonidas is a fully-fledged web application you deploy in your AWS account using Terraform, and then a CodePipeline pipeline. Then, you use \"Leo\", the test case orchestrator, to hit the web API and detonate attack techniques. Leonidas allows describing TTPs as YAML , making it easier to extend than Stratus Red Team. Leonidas does not handle prerequisites for detonating attack techniques. The attack techniques implemented by Leonidas are very granular, meaning it can be challenging to implement detection for them. See for instance: STS Get Caller Identity Leonidas comes with a set of suggested threat detection rules. However, as its attack techniques are very granular, it is practically impossible to use them as-is in a real production environment, as they would trigger many false positives. Stratus Red Team aims at being simpler to use (single binary) and does not require you to have prior infrastructure or configuration in your AWS account. Stratus Red Team focuses on a single thing: executing cloud attack tactics against a live environment, with minimal overhead. You can also use Stratus Red Team programmatically , from Go code, as a library.","title":"Leonidas by F-Secure (Nick Jones)"},{"location":"comparison/#pacu-by-rhino-security-labs","text":"Pacu is an open-source AWS exploitation framework, designed for offensive security testing against cloud environments. Created and maintained by Rhino Security Labs, Pacu allows penetration testers to exploit configuration flaws within an AWS account, using modules to easily expand its functionality. Pacu is an offensive AWS exploitation framework, aimed at penetration testers. It implements various enumeration and exploitation methods, some straightforward and some advanced. For instance, lambda__backdoor_new_roles creates a Lambda function and a CloudWatch Event causing all future IAM roles created in an AWS account to be backdoored automatically. Pacu aims at being used against existing AWS infrastructure. Stratus Red Team is self-contained and does not necessitate prior infrastructure or configuration in your cloud environment. You can also use it programmatically , from Go code, as a library.","title":"Pacu by Rhino Security  Labs"},{"location":"comparison/#amazon-guardduty-tester","text":"Amazon GuardDuty Tester is helpful to trigger GuardDuty findings. However, it is tightly coupled with GuardDuty and is a product-specific tool, even within the AWS ecosystem. If GuardDuty doesn't detect an attack technique, you won't find it in here.","title":"Amazon GuardDuty Tester"},{"location":"comparison/#cloudgoat-by-rhino-security-labs","text":"CloudGoat is Rhino Security Labs' \"Vulnerable by Design\" AWS deployment tool. It allows you to hone your cloud cybersecurity skills by creating and completing several \"capture-the-flag\" style scenarios. CloudGoat is focused on spinning up vulnerable AWS infrastructure, so that you can exploit it to find a flag through a complete exploitation chain. Use CloudGoat to: practice your AWS offensive security and enumeration skills. Use Stratus Red Team to: emulate adversary behavior in AWS to validate your threat detection.","title":"CloudGoat by Rhino Security Labs"},{"location":"contributing/","text":"Contributing We welcome pull requests, contributions and feedback! For any bug report or feedback, open an issue . Contributing to a new attack technique Stratus Red Team is opinionated in the attack techniques it packages - see Philosophy . Feel free to open an issue to discuss ideas about new attack techniques. You can see the current backlog using the GitHub issue label new-technique . Contributing to the core of Stratus Red Team When contributing to the core of Stratus Red Team (i.e. anything that is not a new attack technique), include unit tests if applicable.","title":"Contributing"},{"location":"contributing/#contributing","text":"We welcome pull requests, contributions and feedback! For any bug report or feedback, open an issue .","title":"Contributing"},{"location":"contributing/#contributing-to-a-new-attack-technique","text":"Stratus Red Team is opinionated in the attack techniques it packages - see Philosophy . Feel free to open an issue to discuss ideas about new attack techniques. You can see the current backlog using the GitHub issue label new-technique .","title":"Contributing to a new attack technique"},{"location":"contributing/#contributing-to-the-core-of-stratus-red-team","text":"When contributing to the core of Stratus Red Team (i.e. anything that is not a new attack technique), include unit tests if applicable.","title":"Contributing to the core of Stratus Red Team"},{"location":"faq/","text":"F.A.Q. What permissions do I need to run Stratus Red Team? Stratus Red Team is supposed to be run against a sandbox cloud account or Kubernetes cluster. Consequently, we recommend using it with an administrator role. If you don't have access to an administrator role but would still like to use Stratus Red Team, feel free to open an issue . How does Stratus Red Team persist state? Stratus Red Team persists its state in $HOME/.stratus-red-team . How can I add my own attack techniques to Stratus Red Team? Stratus Red Team is a self-contained Go binary. The implication is that you can't add attack techniques without contributing to its core, as Go cannot easily load code dynamically. While Stratus Red Team may implement a plugin system in the future, we currently feel this would add substantial complexity for a limited value. Note that you can define custom attack techniques when using Stratus Red Team as a Go library . Why didn't you use Python? While using Python would have made some things easier, we consider it is very hard to write solid software in Python, in particular due to the lack of typing. In addition to that, the official Hashicorp Terraform wrapper ( tfexec ) used by Stratus Red Team is written in Go. There is no solid, officially-supported wrapper for Python. Finally, distributing Go binaries is much easier and leads to a better end-user experience. Can I use Stratus Red Team to detonate attack techniques against my own infrastructure? - AWS: This is currently not supported. Stratus Red Team takes care of spinning up all the required infrastructure before detonating attack techniques. Allowing to \"bring your own detonation infrastructure\" is on the roadmap. Kubernetes: Stratus Red Team does not create or destroy Kubernetes clusters for you. You point it at an existing Kubernetes cluster, and it will take care of creating any prerequisite Kubernetes resource required to detonate Kubernetes-specific attack techniques.","title":"Frequently Asked Questions"},{"location":"faq/#faq","text":"","title":"F.A.Q."},{"location":"faq/#what-permissions-do-i-need-to-run-stratus-red-team","text":"Stratus Red Team is supposed to be run against a sandbox cloud account or Kubernetes cluster. Consequently, we recommend using it with an administrator role. If you don't have access to an administrator role but would still like to use Stratus Red Team, feel free to open an issue .","title":"What permissions do I need to run Stratus Red Team?"},{"location":"faq/#how-does-stratus-red-team-persist-state","text":"Stratus Red Team persists its state in $HOME/.stratus-red-team .","title":"How does Stratus Red Team persist state?"},{"location":"faq/#how-can-i-add-my-own-attack-techniques-to-stratus-red-team","text":"Stratus Red Team is a self-contained Go binary. The implication is that you can't add attack techniques without contributing to its core, as Go cannot easily load code dynamically. While Stratus Red Team may implement a plugin system in the future, we currently feel this would add substantial complexity for a limited value. Note that you can define custom attack techniques when using Stratus Red Team as a Go library .","title":"How can I add my own attack techniques to Stratus Red Team?"},{"location":"faq/#why-didnt-you-use-python","text":"While using Python would have made some things easier, we consider it is very hard to write solid software in Python, in particular due to the lack of typing. In addition to that, the official Hashicorp Terraform wrapper ( tfexec ) used by Stratus Red Team is written in Go. There is no solid, officially-supported wrapper for Python. Finally, distributing Go binaries is much easier and leads to a better end-user experience.","title":"Why didn't you use Python?"},{"location":"faq/#can-i-use-stratus-red-team-to-detonate-attack-techniques-against-my-own-infrastructure","text":"","title":"Can I use Stratus Red Team to detonate attack techniques against my own infrastructure?"},{"location":"faq/#-aws-this-is-currently-not-supported-stratus-red-team-takes-care-of-spinning-up-all-the-required-infrastructure-before-detonating-attack-techniques-allowing-to-bring-your-own-detonation-infrastructure-is-on-the-roadmap","text":"Kubernetes: Stratus Red Team does not create or destroy Kubernetes clusters for you. You point it at an existing Kubernetes cluster, and it will take care of creating any prerequisite Kubernetes resource required to detonate Kubernetes-specific attack techniques.","title":"- AWS: This is currently not supported. Stratus Red Team takes care of spinning up all the required infrastructure before detonating attack techniques. Allowing to \"bring your own detonation infrastructure\" is on the roadmap."},{"location":"attack-techniques/","text":"Attack Techniques In this section, you'll find the list of attack techniques implemented in Stratus Red Team. AWS Kubernetes","title":"Attack Techniques"},{"location":"attack-techniques/#attack-techniques","text":"In this section, you'll find the list of attack techniques implemented in Stratus Red Team. AWS Kubernetes","title":"Attack Techniques"},{"location":"attack-techniques/list/","text":"List of all Attack Techniques This page contains the list of all Stratus Attack Techniques. Name Platform MITRE ATT&CK Tactics Retrieve EC2 Password Data AWS Credential Access Steal EC2 Instance Credentials AWS Credential Access Retrieve a High Number of Secrets Manager secrets AWS Credential Access Retrieve And Decrypt SSM Parameters AWS Credential Access Delete CloudTrail Trail AWS Defense Evasion Disable CloudTrail Logging Through Event Selectors AWS Defense Evasion CloudTrail Logs Impairment Through S3 Lifecycle Rule AWS Defense Evasion Stop CloudTrail Trail AWS Defense Evasion Attempt to Leave the AWS Organization AWS Defense Evasion Remove VPC Flow Logs AWS Defense Evasion Execute Discovery Commands on an EC2 Instance AWS Discovery Download EC2 Instance User Data AWS Discovery Execute Commands on EC2 Instance via User Data AWS Execution, Privilege Escalation Open Ingress Port 22 on a Security Group AWS Exfiltration Exfiltrate an AMI by Sharing It AWS Exfiltration Exfiltrate EBS Snapshot by Sharing It AWS Exfiltration Exfiltrate RDS Snapshot by Sharing AWS Exfiltration Backdoor an S3 Bucket via its Bucket Policy AWS Exfiltration Backdoor an IAM Role AWS Persistence Create an Access Key on an IAM User AWS Persistence, Privilege Escalation Create an administrative IAM User AWS Persistence, Privilege Escalation Create a Login Profile on an IAM User AWS Persistence, Privilege Escalation Backdoor Lambda Function Through Resource-Based Policy AWS Persistence Container breakout via hostPath volume mount kubernetes Privilege Escalation","title":"All Attack Techniques"},{"location":"attack-techniques/list/#list-of-all-attack-techniques","text":"This page contains the list of all Stratus Attack Techniques. Name Platform MITRE ATT&CK Tactics Retrieve EC2 Password Data AWS Credential Access Steal EC2 Instance Credentials AWS Credential Access Retrieve a High Number of Secrets Manager secrets AWS Credential Access Retrieve And Decrypt SSM Parameters AWS Credential Access Delete CloudTrail Trail AWS Defense Evasion Disable CloudTrail Logging Through Event Selectors AWS Defense Evasion CloudTrail Logs Impairment Through S3 Lifecycle Rule AWS Defense Evasion Stop CloudTrail Trail AWS Defense Evasion Attempt to Leave the AWS Organization AWS Defense Evasion Remove VPC Flow Logs AWS Defense Evasion Execute Discovery Commands on an EC2 Instance AWS Discovery Download EC2 Instance User Data AWS Discovery Execute Commands on EC2 Instance via User Data AWS Execution, Privilege Escalation Open Ingress Port 22 on a Security Group AWS Exfiltration Exfiltrate an AMI by Sharing It AWS Exfiltration Exfiltrate EBS Snapshot by Sharing It AWS Exfiltration Exfiltrate RDS Snapshot by Sharing AWS Exfiltration Backdoor an S3 Bucket via its Bucket Policy AWS Exfiltration Backdoor an IAM Role AWS Persistence Create an Access Key on an IAM User AWS Persistence, Privilege Escalation Create an administrative IAM User AWS Persistence, Privilege Escalation Create a Login Profile on an IAM User AWS Persistence, Privilege Escalation Backdoor Lambda Function Through Resource-Based Policy AWS Persistence Container breakout via hostPath volume mount kubernetes Privilege Escalation","title":"List of all Attack Techniques"},{"location":"attack-techniques/philosophy/","text":"Philosophy Stratus Red Team is opinionated about the attack techniques it packages, in order to make sure it provides actual value, as opposed to emulating \"attacker behavior\" in a non-actionable way (such as calling sts:GetCallerIdentity ). This page describes the characteristics that all attack techniques of Stratus Red Team should have. Be Granular An attack technique should be granular , meaning that it should emulate a single step of an attack. Good: Share an EBS snapshot with an external AWS account. Bad: Use an IAM access key to perform privilege escalation, run discovery commands, take an EBS snapshot of an instance, share the EBS snapshot with an external AWS account. Emulate actual attacker activity It's always hard to draw a line between legitimate and malicious activity, and between \"theoretical\" and \"practical\" attack techniques. In Stratus Red Team, we aim to follow the following acceptance criteria for adding new attack techniques: Techniques should emulate plausible and documented attacker behavior For every technique, we should have evidence it has been used in the past by attackers, pentesters, or malware It should always be possible to derive a reasonable detection rule from a technique Examples: - Good: Delete a CloudTrail trail - Bad: Run sts:GetCallerIdentity - While attackers might use this API call, it is in no way indicative of attacker activity, as it's used by many services and client applications. - It isn't emulating activity that could reasonably be thought to be malicious. Stratus Red Team's goal is not to re-implement all AWS API calls that may be used by an attacker, neither to emulate all possible theoritical attack vectors. Be Self-Sufficient An attack technique should not be dependent on the state of the cloud environment it's run against. Good: Create an EBS snapshot and share it Bad: Expect an EBS snapshot exists in the account prior to running Stratus Red Team","title":"Philosophy"},{"location":"attack-techniques/philosophy/#philosophy","text":"Stratus Red Team is opinionated about the attack techniques it packages, in order to make sure it provides actual value, as opposed to emulating \"attacker behavior\" in a non-actionable way (such as calling sts:GetCallerIdentity ). This page describes the characteristics that all attack techniques of Stratus Red Team should have.","title":"Philosophy"},{"location":"attack-techniques/philosophy/#be-granular","text":"An attack technique should be granular , meaning that it should emulate a single step of an attack. Good: Share an EBS snapshot with an external AWS account. Bad: Use an IAM access key to perform privilege escalation, run discovery commands, take an EBS snapshot of an instance, share the EBS snapshot with an external AWS account.","title":"Be Granular"},{"location":"attack-techniques/philosophy/#emulate-actual-attacker-activity","text":"It's always hard to draw a line between legitimate and malicious activity, and between \"theoretical\" and \"practical\" attack techniques. In Stratus Red Team, we aim to follow the following acceptance criteria for adding new attack techniques: Techniques should emulate plausible and documented attacker behavior For every technique, we should have evidence it has been used in the past by attackers, pentesters, or malware It should always be possible to derive a reasonable detection rule from a technique Examples: - Good: Delete a CloudTrail trail - Bad: Run sts:GetCallerIdentity - While attackers might use this API call, it is in no way indicative of attacker activity, as it's used by many services and client applications. - It isn't emulating activity that could reasonably be thought to be malicious. Stratus Red Team's goal is not to re-implement all AWS API calls that may be used by an attacker, neither to emulate all possible theoritical attack vectors.","title":"Emulate actual attacker activity"},{"location":"attack-techniques/philosophy/#be-self-sufficient","text":"An attack technique should not be dependent on the state of the cloud environment it's run against. Good: Create an EBS snapshot and share it Bad: Expect an EBS snapshot exists in the account prior to running Stratus Red Team","title":"Be Self-Sufficient"},{"location":"attack-techniques/supported-platforms/","text":"Supported Platforms AWS To use Stratus Red Team attack techniques against AWS, you need to be authenticated prior to running it. See: Connecting to your cloud account . Kubernetes Stratus Red Team also supports Kubernetes attack techniques . It does not create a Kubernetes cluster for you. Instead, it assumes you're already authenticated against a test Kubernetes cluster with kubectl and uses your default context. As a rule of thumb, Stratus Red Team detonates attack techniques against the cluster you see when running kubectl cluster-info . Tested with: Minikube and AWS EKS. Future Support for Additional Platforms We plan to add support for Azure or GCP in the future. If you're interested, go upvote the corresponding issue!","title":"Supported Platforms"},{"location":"attack-techniques/supported-platforms/#supported-platforms","text":"","title":"Supported Platforms"},{"location":"attack-techniques/supported-platforms/#aws","text":"To use Stratus Red Team attack techniques against AWS, you need to be authenticated prior to running it. See: Connecting to your cloud account .","title":"AWS"},{"location":"attack-techniques/supported-platforms/#kubernetes","text":"Stratus Red Team also supports Kubernetes attack techniques . It does not create a Kubernetes cluster for you. Instead, it assumes you're already authenticated against a test Kubernetes cluster with kubectl and uses your default context. As a rule of thumb, Stratus Red Team detonates attack techniques against the cluster you see when running kubectl cluster-info . Tested with: Minikube and AWS EKS.","title":"Kubernetes"},{"location":"attack-techniques/supported-platforms/#future-support-for-additional-platforms","text":"We plan to add support for Azure or GCP in the future. If you're interested, go upvote the corresponding issue!","title":"Future Support for Additional Platforms"},{"location":"attack-techniques/AWS/","text":"AWS This page contains the Stratus attack techniques for AWS, grouped by MITRE ATT&CK Tactic. Note that some Stratus attack techniques may correspond to more than a single ATT&CK Tactic. Credential Access Retrieve EC2 Password Data Steal EC2 Instance Credentials Retrieve a High Number of Secrets Manager secrets Retrieve And Decrypt SSM Parameters Defense Evasion Delete CloudTrail Trail Disable CloudTrail Logging Through Event Selectors CloudTrail Logs Impairment Through S3 Lifecycle Rule Stop CloudTrail Trail Attempt to Leave the AWS Organization Remove VPC Flow Logs Discovery Execute Discovery Commands on an EC2 Instance Download EC2 Instance User Data Execution Execute Commands on EC2 Instance via User Data Exfiltration Open Ingress Port 22 on a Security Group Exfiltrate an AMI by Sharing It Exfiltrate EBS Snapshot by Sharing It Exfiltrate RDS Snapshot by Sharing Backdoor an S3 Bucket via its Bucket Policy Persistence Backdoor an IAM Role Create an Access Key on an IAM User Create an administrative IAM User Create a Login Profile on an IAM User Backdoor Lambda Function Through Resource-Based Policy Privilege Escalation Execute Commands on EC2 Instance via User Data Create an Access Key on an IAM User Create an administrative IAM User Create a Login Profile on an IAM User","title":"AWS"},{"location":"attack-techniques/AWS/#aws","text":"This page contains the Stratus attack techniques for AWS, grouped by MITRE ATT&CK Tactic. Note that some Stratus attack techniques may correspond to more than a single ATT&CK Tactic.","title":"AWS"},{"location":"attack-techniques/AWS/#credential-access","text":"Retrieve EC2 Password Data Steal EC2 Instance Credentials Retrieve a High Number of Secrets Manager secrets Retrieve And Decrypt SSM Parameters","title":"Credential Access"},{"location":"attack-techniques/AWS/#defense-evasion","text":"Delete CloudTrail Trail Disable CloudTrail Logging Through Event Selectors CloudTrail Logs Impairment Through S3 Lifecycle Rule Stop CloudTrail Trail Attempt to Leave the AWS Organization Remove VPC Flow Logs","title":"Defense Evasion"},{"location":"attack-techniques/AWS/#discovery","text":"Execute Discovery Commands on an EC2 Instance Download EC2 Instance User Data","title":"Discovery"},{"location":"attack-techniques/AWS/#execution","text":"Execute Commands on EC2 Instance via User Data","title":"Execution"},{"location":"attack-techniques/AWS/#exfiltration","text":"Open Ingress Port 22 on a Security Group Exfiltrate an AMI by Sharing It Exfiltrate EBS Snapshot by Sharing It Exfiltrate RDS Snapshot by Sharing Backdoor an S3 Bucket via its Bucket Policy","title":"Exfiltration"},{"location":"attack-techniques/AWS/#persistence","text":"Backdoor an IAM Role Create an Access Key on an IAM User Create an administrative IAM User Create a Login Profile on an IAM User Backdoor Lambda Function Through Resource-Based Policy","title":"Persistence"},{"location":"attack-techniques/AWS/#privilege-escalation","text":"Execute Commands on EC2 Instance via User Data Create an Access Key on an IAM User Create an administrative IAM User Create a Login Profile on an IAM User","title":"Privilege Escalation"},{"location":"attack-techniques/AWS/aws.credential-access.ec2-get-password-data/","text":"Retrieve EC2 Password Data idempotent Platform: AWS MITRE ATT&CK Tactics Credential Access Description Runs ec2:GetPasswordData from a role that does not have permission to do so. This simulates an attacker attempting to retrieve RDP passwords on a high number of Windows EC2 instances. See https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_GetPasswordData.html Warm-up : Create an IAM role without permissions to run ec2:GetPasswordData Detonation : Assume the role Run a number of ec2:GetPasswordData calls (which will be denied) using fictitious instance IDs Instructions Detonate with Stratus Red Team stratus detonate aws.credential-access.ec2-get-password-data Detection Identify principals making a large number of ec2:GetPasswordData calls, using CloudTrail's GetPasswordData event","title":"Retrieve EC2 Password Data"},{"location":"attack-techniques/AWS/aws.credential-access.ec2-get-password-data/#retrieve-ec2-password-data","text":"idempotent Platform: AWS","title":"Retrieve EC2 Password Data"},{"location":"attack-techniques/AWS/aws.credential-access.ec2-get-password-data/#mitre-attck-tactics","text":"Credential Access","title":"MITRE ATT&amp;CK Tactics"},{"location":"attack-techniques/AWS/aws.credential-access.ec2-get-password-data/#description","text":"Runs ec2:GetPasswordData from a role that does not have permission to do so. This simulates an attacker attempting to retrieve RDP passwords on a high number of Windows EC2 instances. See https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_GetPasswordData.html Warm-up : Create an IAM role without permissions to run ec2:GetPasswordData Detonation : Assume the role Run a number of ec2:GetPasswordData calls (which will be denied) using fictitious instance IDs","title":"Description"},{"location":"attack-techniques/AWS/aws.credential-access.ec2-get-password-data/#instructions","text":"Detonate with Stratus Red Team stratus detonate aws.credential-access.ec2-get-password-data","title":"Instructions"},{"location":"attack-techniques/AWS/aws.credential-access.ec2-get-password-data/#detection","text":"Identify principals making a large number of ec2:GetPasswordData calls, using CloudTrail's GetPasswordData event","title":"Detection"},{"location":"attack-techniques/AWS/aws.credential-access.ec2-steal-instance-credentials/","text":"Steal EC2 Instance Credentials slow idempotent Platform: AWS MITRE ATT&CK Tactics Credential Access Description Simulates the theft of EC2 instance credentials from the Instance Metadata Service. Warm-up : Create the prerequisite EC2 instance and VPC (takes a few minutes). Detonation : Execute a SSM command on the instance to retrieve temporary credentials Use these credentials locally (outside the instance) to run the following commands: sts:GetCallerIdentity ec2:DescribeInstances Instructions Detonate with Stratus Red Team stratus detonate aws.credential-access.ec2-steal-instance-credentials Detection GuardDuty provides two findings to identify stolen EC2 instance credentials. InstanceCredentialExfiltration.OutsideAWS identifies EC2 instance credentials used from outside an AWS account. InstanceCredentialExfiltration.InsideAWS identifies EC2 instance credentials used from a different AWS account than the one of the EC2 instance. See also: Known detection bypasses .","title":"Steal EC2 Instance Credentials"},{"location":"attack-techniques/AWS/aws.credential-access.ec2-steal-instance-credentials/#steal-ec2-instance-credentials","text":"slow idempotent Platform: AWS","title":"Steal EC2 Instance Credentials"},{"location":"attack-techniques/AWS/aws.credential-access.ec2-steal-instance-credentials/#mitre-attck-tactics","text":"Credential Access","title":"MITRE ATT&amp;CK Tactics"},{"location":"attack-techniques/AWS/aws.credential-access.ec2-steal-instance-credentials/#description","text":"Simulates the theft of EC2 instance credentials from the Instance Metadata Service. Warm-up : Create the prerequisite EC2 instance and VPC (takes a few minutes). Detonation : Execute a SSM command on the instance to retrieve temporary credentials Use these credentials locally (outside the instance) to run the following commands: sts:GetCallerIdentity ec2:DescribeInstances","title":"Description"},{"location":"attack-techniques/AWS/aws.credential-access.ec2-steal-instance-credentials/#instructions","text":"Detonate with Stratus Red Team stratus detonate aws.credential-access.ec2-steal-instance-credentials","title":"Instructions"},{"location":"attack-techniques/AWS/aws.credential-access.ec2-steal-instance-credentials/#detection","text":"GuardDuty provides two findings to identify stolen EC2 instance credentials. InstanceCredentialExfiltration.OutsideAWS identifies EC2 instance credentials used from outside an AWS account. InstanceCredentialExfiltration.InsideAWS identifies EC2 instance credentials used from a different AWS account than the one of the EC2 instance. See also: Known detection bypasses .","title":"Detection"},{"location":"attack-techniques/AWS/aws.credential-access.secretsmanager-retrieve-secrets/","text":"Retrieve a High Number of Secrets Manager secrets idempotent Platform: AWS MITRE ATT&CK Tactics Credential Access Description Retrieves a high number of Secrets Manager secrets, through secretsmanager:GetSecretValue. Warm-up : Create multiple secrets in Secrets Manager. Detonation : Enumerate the secrets through secretsmanager:ListSecrets Retrieve each secret value, one by one through secretsmanager:GetSecretValue Instructions Detonate with Stratus Red Team stratus detonate aws.credential-access.secretsmanager-retrieve-secrets Detection Identify principals retrieving a high number of secrets, through CloudTrail's GetSecretValue event. The following may be use to tune the detection, or validate findings: Principals who do not usually call secretsmanager:GetSecretValue Attempts to call GetSecretValue resulting in access denied errors","title":"Retrieve a High Number of Secrets Manager secrets"},{"location":"attack-techniques/AWS/aws.credential-access.secretsmanager-retrieve-secrets/#retrieve-a-high-number-of-secrets-manager-secrets","text":"idempotent Platform: AWS","title":"Retrieve a High Number of Secrets Manager secrets"},{"location":"attack-techniques/AWS/aws.credential-access.secretsmanager-retrieve-secrets/#mitre-attck-tactics","text":"Credential Access","title":"MITRE ATT&amp;CK Tactics"},{"location":"attack-techniques/AWS/aws.credential-access.secretsmanager-retrieve-secrets/#description","text":"Retrieves a high number of Secrets Manager secrets, through secretsmanager:GetSecretValue. Warm-up : Create multiple secrets in Secrets Manager. Detonation : Enumerate the secrets through secretsmanager:ListSecrets Retrieve each secret value, one by one through secretsmanager:GetSecretValue","title":"Description"},{"location":"attack-techniques/AWS/aws.credential-access.secretsmanager-retrieve-secrets/#instructions","text":"Detonate with Stratus Red Team stratus detonate aws.credential-access.secretsmanager-retrieve-secrets","title":"Instructions"},{"location":"attack-techniques/AWS/aws.credential-access.secretsmanager-retrieve-secrets/#detection","text":"Identify principals retrieving a high number of secrets, through CloudTrail's GetSecretValue event. The following may be use to tune the detection, or validate findings: Principals who do not usually call secretsmanager:GetSecretValue Attempts to call GetSecretValue resulting in access denied errors","title":"Detection"},{"location":"attack-techniques/AWS/aws.credential-access.ssm-retrieve-securestring-parameters/","text":"Retrieve And Decrypt SSM Parameters idempotent Platform: AWS MITRE ATT&CK Tactics Credential Access Description Retrieves and decrypts a high number (30) of SSM Parameters available in an AWS region. Warm-up : Create multiple SSM Parameters Detonation : Use ssm:DescribeParameters to list SSM Parameters in the current region Use ssm:GetParameters by batch of 10 (maximal supported value) to retrieve the values of the SSM Parameters Instructions Detonate with Stratus Red Team stratus detonate aws.credential-access.ssm-retrieve-securestring-parameters Detection Identify principals retrieving a high number of SSM Parameters, through CloudTrail's GetParameter and GetParameters events. It is especially suspicious when parameters of type SecretString are retrieved, indicated when requestParameters.withDecryption is set to true in the CloudTrail events. The following may be use to tune the detection, or validate findings: Principals who do not usually call ssm:GetParameter(s) Attempts to call ssm:GetParameter(s) resulting in access denied errors","title":"Retrieve And Decrypt SSM Parameters"},{"location":"attack-techniques/AWS/aws.credential-access.ssm-retrieve-securestring-parameters/#retrieve-and-decrypt-ssm-parameters","text":"idempotent Platform: AWS","title":"Retrieve And Decrypt SSM Parameters"},{"location":"attack-techniques/AWS/aws.credential-access.ssm-retrieve-securestring-parameters/#mitre-attck-tactics","text":"Credential Access","title":"MITRE ATT&amp;CK Tactics"},{"location":"attack-techniques/AWS/aws.credential-access.ssm-retrieve-securestring-parameters/#description","text":"Retrieves and decrypts a high number (30) of SSM Parameters available in an AWS region. Warm-up : Create multiple SSM Parameters Detonation : Use ssm:DescribeParameters to list SSM Parameters in the current region Use ssm:GetParameters by batch of 10 (maximal supported value) to retrieve the values of the SSM Parameters","title":"Description"},{"location":"attack-techniques/AWS/aws.credential-access.ssm-retrieve-securestring-parameters/#instructions","text":"Detonate with Stratus Red Team stratus detonate aws.credential-access.ssm-retrieve-securestring-parameters","title":"Instructions"},{"location":"attack-techniques/AWS/aws.credential-access.ssm-retrieve-securestring-parameters/#detection","text":"Identify principals retrieving a high number of SSM Parameters, through CloudTrail's GetParameter and GetParameters events. It is especially suspicious when parameters of type SecretString are retrieved, indicated when requestParameters.withDecryption is set to true in the CloudTrail events. The following may be use to tune the detection, or validate findings: Principals who do not usually call ssm:GetParameter(s) Attempts to call ssm:GetParameter(s) resulting in access denied errors","title":"Detection"},{"location":"attack-techniques/AWS/aws.defense-evasion.cloudtrail-delete/","text":"Delete CloudTrail Trail Platform: AWS MITRE ATT&CK Tactics Defense Evasion Description Delete a CloudTrail trail. Simulates an attacker disrupting CloudTrail logging. Warm-up : Create a CloudTrail trail. Detonation : Delete the CloudTrail trail. Instructions Detonate with Stratus Red Team stratus detonate aws.defense-evasion.cloudtrail-delete Detection Identify when a CloudTrail trail is deleted, through CloudTrail's DeleteTrail event. GuardDuty also provides a dedicated finding type, Stealth:IAMUser/CloudTrailLoggingDisabled .","title":"Delete CloudTrail Trail"},{"location":"attack-techniques/AWS/aws.defense-evasion.cloudtrail-delete/#delete-cloudtrail-trail","text":"Platform: AWS","title":"Delete CloudTrail Trail"},{"location":"attack-techniques/AWS/aws.defense-evasion.cloudtrail-delete/#mitre-attck-tactics","text":"Defense Evasion","title":"MITRE ATT&amp;CK Tactics"},{"location":"attack-techniques/AWS/aws.defense-evasion.cloudtrail-delete/#description","text":"Delete a CloudTrail trail. Simulates an attacker disrupting CloudTrail logging. Warm-up : Create a CloudTrail trail. Detonation : Delete the CloudTrail trail.","title":"Description"},{"location":"attack-techniques/AWS/aws.defense-evasion.cloudtrail-delete/#instructions","text":"Detonate with Stratus Red Team stratus detonate aws.defense-evasion.cloudtrail-delete","title":"Instructions"},{"location":"attack-techniques/AWS/aws.defense-evasion.cloudtrail-delete/#detection","text":"Identify when a CloudTrail trail is deleted, through CloudTrail's DeleteTrail event. GuardDuty also provides a dedicated finding type, Stealth:IAMUser/CloudTrailLoggingDisabled .","title":"Detection"},{"location":"attack-techniques/AWS/aws.defense-evasion.cloudtrail-event-selectors/","text":"Disable CloudTrail Logging Through Event Selectors idempotent Platform: AWS MITRE ATT&CK Tactics Defense Evasion Description Disrupt CloudTrail Logging by creating an event selector on the Trail, filtering out all management events. Reference: https://github.com/RhinoSecurityLabs/Cloud-Security-Research/tree/master/AWS/cloudtrail_guardduty_bypass Warm-up : Create a CloudTrail trail. Detonation : Create a CloudTrail event selector to disable management events, through cloudtrail:PutEventSelectors Instructions Detonate with Stratus Red Team stratus detonate aws.defense-evasion.cloudtrail-event-selectors Detection Identify when event selectors of a CloudTrail trail are updated, through CloudTrail's PutEventSelectors event.","title":"Disable CloudTrail Logging Through Event Selectors"},{"location":"attack-techniques/AWS/aws.defense-evasion.cloudtrail-event-selectors/#disable-cloudtrail-logging-through-event-selectors","text":"idempotent Platform: AWS","title":"Disable CloudTrail Logging Through Event Selectors"},{"location":"attack-techniques/AWS/aws.defense-evasion.cloudtrail-event-selectors/#mitre-attck-tactics","text":"Defense Evasion","title":"MITRE ATT&amp;CK Tactics"},{"location":"attack-techniques/AWS/aws.defense-evasion.cloudtrail-event-selectors/#description","text":"Disrupt CloudTrail Logging by creating an event selector on the Trail, filtering out all management events. Reference: https://github.com/RhinoSecurityLabs/Cloud-Security-Research/tree/master/AWS/cloudtrail_guardduty_bypass Warm-up : Create a CloudTrail trail. Detonation : Create a CloudTrail event selector to disable management events, through cloudtrail:PutEventSelectors","title":"Description"},{"location":"attack-techniques/AWS/aws.defense-evasion.cloudtrail-event-selectors/#instructions","text":"Detonate with Stratus Red Team stratus detonate aws.defense-evasion.cloudtrail-event-selectors","title":"Instructions"},{"location":"attack-techniques/AWS/aws.defense-evasion.cloudtrail-event-selectors/#detection","text":"Identify when event selectors of a CloudTrail trail are updated, through CloudTrail's PutEventSelectors event.","title":"Detection"},{"location":"attack-techniques/AWS/aws.defense-evasion.cloudtrail-lifecycle-rule/","text":"CloudTrail Logs Impairment Through S3 Lifecycle Rule Platform: AWS MITRE ATT&CK Tactics Defense Evasion Description Set a 1-day retention policy on the S3 bucket used by a CloudTrail Trail, using a S3 Lifecycle Rule. References: https://www.justice.gov/usao-sdny/press-release/file/1452706/download Warm-up : Create a CloudTrail trail logging to a S3 bucket. Detonation : Apply a S3 Lifecycle Rule automatically removing objects after 1 day. Instructions Detonate with Stratus Red Team stratus detonate aws.defense-evasion.cloudtrail-lifecycle-rule Detection Identify when lifecycle rule with a short expiration is applied to an S3 bucket used for CloudTrail logging. The CloudTrail event PutBucketLifecycle and its attribute requestParameters.LifecycleConfiguration.Rule.Expiration.Days can be used.","title":"CloudTrail Logs Impairment Through S3 Lifecycle Rule"},{"location":"attack-techniques/AWS/aws.defense-evasion.cloudtrail-lifecycle-rule/#cloudtrail-logs-impairment-through-s3-lifecycle-rule","text":"Platform: AWS","title":"CloudTrail Logs Impairment Through S3 Lifecycle Rule"},{"location":"attack-techniques/AWS/aws.defense-evasion.cloudtrail-lifecycle-rule/#mitre-attck-tactics","text":"Defense Evasion","title":"MITRE ATT&amp;CK Tactics"},{"location":"attack-techniques/AWS/aws.defense-evasion.cloudtrail-lifecycle-rule/#description","text":"Set a 1-day retention policy on the S3 bucket used by a CloudTrail Trail, using a S3 Lifecycle Rule. References: https://www.justice.gov/usao-sdny/press-release/file/1452706/download Warm-up : Create a CloudTrail trail logging to a S3 bucket. Detonation : Apply a S3 Lifecycle Rule automatically removing objects after 1 day.","title":"Description"},{"location":"attack-techniques/AWS/aws.defense-evasion.cloudtrail-lifecycle-rule/#instructions","text":"Detonate with Stratus Red Team stratus detonate aws.defense-evasion.cloudtrail-lifecycle-rule","title":"Instructions"},{"location":"attack-techniques/AWS/aws.defense-evasion.cloudtrail-lifecycle-rule/#detection","text":"Identify when lifecycle rule with a short expiration is applied to an S3 bucket used for CloudTrail logging. The CloudTrail event PutBucketLifecycle and its attribute requestParameters.LifecycleConfiguration.Rule.Expiration.Days can be used.","title":"Detection"},{"location":"attack-techniques/AWS/aws.defense-evasion.cloudtrail-stop/","text":"Stop CloudTrail Trail idempotent Platform: AWS MITRE ATT&CK Tactics Defense Evasion Description Stops a CloudTrail Trail from logging. Simulates an attacker disrupting CloudTrail logging. Warm-up : Create a CloudTrail Trail. Detonation : Call cloudtrail:StopLogging to stop CloudTrail logging. Instructions Detonate with Stratus Red Team stratus detonate aws.defense-evasion.cloudtrail-stop Detection Identify when a CloudTrail trail is disabled, through CloudTrail's StopLogging event. GuardDuty also provides a dedicated finding type, Stealth:IAMUser/CloudTrailLoggingDisabled .","title":"Stop CloudTrail Trail"},{"location":"attack-techniques/AWS/aws.defense-evasion.cloudtrail-stop/#stop-cloudtrail-trail","text":"idempotent Platform: AWS","title":"Stop CloudTrail Trail"},{"location":"attack-techniques/AWS/aws.defense-evasion.cloudtrail-stop/#mitre-attck-tactics","text":"Defense Evasion","title":"MITRE ATT&amp;CK Tactics"},{"location":"attack-techniques/AWS/aws.defense-evasion.cloudtrail-stop/#description","text":"Stops a CloudTrail Trail from logging. Simulates an attacker disrupting CloudTrail logging. Warm-up : Create a CloudTrail Trail. Detonation : Call cloudtrail:StopLogging to stop CloudTrail logging.","title":"Description"},{"location":"attack-techniques/AWS/aws.defense-evasion.cloudtrail-stop/#instructions","text":"Detonate with Stratus Red Team stratus detonate aws.defense-evasion.cloudtrail-stop","title":"Instructions"},{"location":"attack-techniques/AWS/aws.defense-evasion.cloudtrail-stop/#detection","text":"Identify when a CloudTrail trail is disabled, through CloudTrail's StopLogging event. GuardDuty also provides a dedicated finding type, Stealth:IAMUser/CloudTrailLoggingDisabled .","title":"Detection"},{"location":"attack-techniques/AWS/aws.defense-evasion.organizations-leave/","text":"Attempt to Leave the AWS Organization idempotent Platform: AWS MITRE ATT&CK Tactics Defense Evasion Description Attempts to leave the AWS Organization (unsuccessfully - will hit an AccessDenied error). Security configurations are often defined at the organization level (GuardDuty, SecurityHub, CloudTrail...). Leaving the organization can disrupt or totally shut down these controls. Warm-up : Create an IAM role without permissions to run organizations:LeaveOrganization Detonation : Call organization:LeaveOrganization to simulate an attempt to leave the AWS Organization. Instructions Detonate with Stratus Red Team stratus detonate aws.defense-evasion.organizations-leave Detection Any attempts from a child account to leave its AWS Organization should be considered suspicious. Use the CloudTrail event LeaveOrganization .","title":"Attempt to Leave the AWS Organization"},{"location":"attack-techniques/AWS/aws.defense-evasion.organizations-leave/#attempt-to-leave-the-aws-organization","text":"idempotent Platform: AWS","title":"Attempt to Leave the AWS Organization"},{"location":"attack-techniques/AWS/aws.defense-evasion.organizations-leave/#mitre-attck-tactics","text":"Defense Evasion","title":"MITRE ATT&amp;CK Tactics"},{"location":"attack-techniques/AWS/aws.defense-evasion.organizations-leave/#description","text":"Attempts to leave the AWS Organization (unsuccessfully - will hit an AccessDenied error). Security configurations are often defined at the organization level (GuardDuty, SecurityHub, CloudTrail...). Leaving the organization can disrupt or totally shut down these controls. Warm-up : Create an IAM role without permissions to run organizations:LeaveOrganization Detonation : Call organization:LeaveOrganization to simulate an attempt to leave the AWS Organization.","title":"Description"},{"location":"attack-techniques/AWS/aws.defense-evasion.organizations-leave/#instructions","text":"Detonate with Stratus Red Team stratus detonate aws.defense-evasion.organizations-leave","title":"Instructions"},{"location":"attack-techniques/AWS/aws.defense-evasion.organizations-leave/#detection","text":"Any attempts from a child account to leave its AWS Organization should be considered suspicious. Use the CloudTrail event LeaveOrganization .","title":"Detection"},{"location":"attack-techniques/AWS/aws.defense-evasion.vpc-remove-flow-logs/","text":"Remove VPC Flow Logs Platform: AWS MITRE ATT&CK Tactics Defense Evasion Description Removes a VPC Flog Logs configuration from a VPC. Warm-up : Create a VPC with a VPC Flow Logs configuration. Detonation : Remove the VPC Flow Logs configuration. Instructions Detonate with Stratus Red Team stratus detonate aws.defense-evasion.vpc-remove-flow-logs Detection Using CloudTrail's DeleteFlowLogs event. To reduce the risk of false positives related to VPC deletion in development environments, alerts can be raised only when DeleteFlowLogs is not closely followed by DeleteVpc .","title":"Remove VPC Flow Logs"},{"location":"attack-techniques/AWS/aws.defense-evasion.vpc-remove-flow-logs/#remove-vpc-flow-logs","text":"Platform: AWS","title":"Remove VPC Flow Logs"},{"location":"attack-techniques/AWS/aws.defense-evasion.vpc-remove-flow-logs/#mitre-attck-tactics","text":"Defense Evasion","title":"MITRE ATT&amp;CK Tactics"},{"location":"attack-techniques/AWS/aws.defense-evasion.vpc-remove-flow-logs/#description","text":"Removes a VPC Flog Logs configuration from a VPC. Warm-up : Create a VPC with a VPC Flow Logs configuration. Detonation : Remove the VPC Flow Logs configuration.","title":"Description"},{"location":"attack-techniques/AWS/aws.defense-evasion.vpc-remove-flow-logs/#instructions","text":"Detonate with Stratus Red Team stratus detonate aws.defense-evasion.vpc-remove-flow-logs","title":"Instructions"},{"location":"attack-techniques/AWS/aws.defense-evasion.vpc-remove-flow-logs/#detection","text":"Using CloudTrail's DeleteFlowLogs event. To reduce the risk of false positives related to VPC deletion in development environments, alerts can be raised only when DeleteFlowLogs is not closely followed by DeleteVpc .","title":"Detection"},{"location":"attack-techniques/AWS/aws.discovery.ec2-download-user-data/","text":"Download EC2 Instance User Data idempotent Platform: AWS MITRE ATT&CK Tactics Discovery Description Runs ec2:DescribeInstanceAttribute on several instances. This simulates an attacker attempting to retrieve Instance User Data that may include installation scripts and hard-coded secrets for deployment. See: https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-metadata.html https://hackingthe.cloud/aws/general-knowledge/introduction_user_data/ https://github.com/RhinoSecurityLabs/pacu/blob/master/pacu/modules/ec2__download_userdata/main.py Warm-up : Create an IAM role without permissions to run ec2:DescribeInstanceAttribute Detonation : Run ec2:DescribeInstanceAttribute on multiple fictitious instance IDs These calls will result in access denied errors Instructions Detonate with Stratus Red Team stratus detonate aws.discovery.ec2-download-user-data Detection Through CloudTrail's <code>DescribeInstanceAttribute</code> event. See: * [Associated Sigma rule](https://github.com/SigmaHQ/sigma/blob/master/rules/cloud/aws/aws_ec2_download_userdata.yml)","title":"Download EC2 Instance User Data"},{"location":"attack-techniques/AWS/aws.discovery.ec2-download-user-data/#download-ec2-instance-user-data","text":"idempotent Platform: AWS","title":"Download EC2 Instance User Data"},{"location":"attack-techniques/AWS/aws.discovery.ec2-download-user-data/#mitre-attck-tactics","text":"Discovery","title":"MITRE ATT&amp;CK Tactics"},{"location":"attack-techniques/AWS/aws.discovery.ec2-download-user-data/#description","text":"Runs ec2:DescribeInstanceAttribute on several instances. This simulates an attacker attempting to retrieve Instance User Data that may include installation scripts and hard-coded secrets for deployment. See: https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-metadata.html https://hackingthe.cloud/aws/general-knowledge/introduction_user_data/ https://github.com/RhinoSecurityLabs/pacu/blob/master/pacu/modules/ec2__download_userdata/main.py Warm-up : Create an IAM role without permissions to run ec2:DescribeInstanceAttribute Detonation : Run ec2:DescribeInstanceAttribute on multiple fictitious instance IDs These calls will result in access denied errors","title":"Description"},{"location":"attack-techniques/AWS/aws.discovery.ec2-download-user-data/#instructions","text":"Detonate with Stratus Red Team stratus detonate aws.discovery.ec2-download-user-data","title":"Instructions"},{"location":"attack-techniques/AWS/aws.discovery.ec2-download-user-data/#detection","text":"Through CloudTrail's <code>DescribeInstanceAttribute</code> event. See: * [Associated Sigma rule](https://github.com/SigmaHQ/sigma/blob/master/rules/cloud/aws/aws_ec2_download_userdata.yml)","title":"Detection"},{"location":"attack-techniques/AWS/aws.discovery.ec2-enumerate-from-instance/","text":"Execute Discovery Commands on an EC2 Instance slow idempotent Platform: AWS MITRE ATT&CK Tactics Discovery Description Runs several discovery commands on an EC2 instance: sts:GetCallerIdentity s3:ListBuckets iam:GetAccountSummary iam:ListRoles iam:ListUsers iam:GetAccountAuthorizationDetails ec2:DescribeSnapshots cloudtrail:DescribeTrails guardduty:ListDetectors The commands will be run under the identity of the EC2 instance role, simulating an attacker having compromised an EC2 instance and running discovery commands on it. Warm-up : Create the prerequisite EC2 instance and VPC (takes a few minutes). Detonation : Run the discovery commands, over SSM. The commands will be run under the identity of the EC2 instance role. Instructions Detonate with Stratus Red Team stratus detonate aws.discovery.ec2-enumerate-from-instance Detection Identify when an EC2 instance performs unusual enumeration calls. An action can be determined to have been performed by an EC2 instance under its instance role when the attribute userIdentity.arn of a CloudTrail event ends with i-* , for instance: arn:aws:sts::012345678901:assumed-role/my-instance-role/i-0adc17a5acb70d9ae","title":"Execute Discovery Commands on an EC2 Instance"},{"location":"attack-techniques/AWS/aws.discovery.ec2-enumerate-from-instance/#execute-discovery-commands-on-an-ec2-instance","text":"slow idempotent Platform: AWS","title":"Execute Discovery Commands on an EC2 Instance"},{"location":"attack-techniques/AWS/aws.discovery.ec2-enumerate-from-instance/#mitre-attck-tactics","text":"Discovery","title":"MITRE ATT&amp;CK Tactics"},{"location":"attack-techniques/AWS/aws.discovery.ec2-enumerate-from-instance/#description","text":"Runs several discovery commands on an EC2 instance: sts:GetCallerIdentity s3:ListBuckets iam:GetAccountSummary iam:ListRoles iam:ListUsers iam:GetAccountAuthorizationDetails ec2:DescribeSnapshots cloudtrail:DescribeTrails guardduty:ListDetectors The commands will be run under the identity of the EC2 instance role, simulating an attacker having compromised an EC2 instance and running discovery commands on it. Warm-up : Create the prerequisite EC2 instance and VPC (takes a few minutes). Detonation : Run the discovery commands, over SSM. The commands will be run under the identity of the EC2 instance role.","title":"Description"},{"location":"attack-techniques/AWS/aws.discovery.ec2-enumerate-from-instance/#instructions","text":"Detonate with Stratus Red Team stratus detonate aws.discovery.ec2-enumerate-from-instance","title":"Instructions"},{"location":"attack-techniques/AWS/aws.discovery.ec2-enumerate-from-instance/#detection","text":"Identify when an EC2 instance performs unusual enumeration calls. An action can be determined to have been performed by an EC2 instance under its instance role when the attribute userIdentity.arn of a CloudTrail event ends with i-* , for instance: arn:aws:sts::012345678901:assumed-role/my-instance-role/i-0adc17a5acb70d9ae","title":"Detection"},{"location":"attack-techniques/AWS/aws.execution.ec2-user-data/","text":"Execute Commands on EC2 Instance via User Data slow idempotent Platform: AWS MITRE ATT&CK Tactics Execution Privilege Escalation Description Executes code on a Linux EC2 instance through User Data. References: https://hackingthe.cloud/aws/exploitation/local-priv-esc-mod-instance-att/ https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/user-data.html Warm-up : Create the prerequisite EC2 instance and VPC (takes a few minutes). Detonation : Stop the instance Use ModifyInstanceAttribute to inject a malicious script in user data Start the instance Upon starting, the malicious script in user data is automatically executed as the root user Instructions Detonate with Stratus Red Team stratus detonate aws.execution.ec2-user-data Detection Identify when the following sequence of CloudTrail events occur in a short period of time (e.g., < 1 hour) StopInstances (necessary, because the user data of an instance cannot be changed when it's running) ModifyInstanceAttribute with requestParameters.userData non-empty When not possible to perform such correlation, alerting on the second event only is an option. It's generally not expected that the user data of an EC2 instance changes often, especially with the popularity of immutable machine images, provisioned before instantiation.","title":"Execute Commands on EC2 Instance via User Data"},{"location":"attack-techniques/AWS/aws.execution.ec2-user-data/#execute-commands-on-ec2-instance-via-user-data","text":"slow idempotent Platform: AWS","title":"Execute Commands on EC2 Instance via User Data"},{"location":"attack-techniques/AWS/aws.execution.ec2-user-data/#mitre-attck-tactics","text":"Execution Privilege Escalation","title":"MITRE ATT&amp;CK Tactics"},{"location":"attack-techniques/AWS/aws.execution.ec2-user-data/#description","text":"Executes code on a Linux EC2 instance through User Data. References: https://hackingthe.cloud/aws/exploitation/local-priv-esc-mod-instance-att/ https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/user-data.html Warm-up : Create the prerequisite EC2 instance and VPC (takes a few minutes). Detonation : Stop the instance Use ModifyInstanceAttribute to inject a malicious script in user data Start the instance Upon starting, the malicious script in user data is automatically executed as the root user","title":"Description"},{"location":"attack-techniques/AWS/aws.execution.ec2-user-data/#instructions","text":"Detonate with Stratus Red Team stratus detonate aws.execution.ec2-user-data","title":"Instructions"},{"location":"attack-techniques/AWS/aws.execution.ec2-user-data/#detection","text":"Identify when the following sequence of CloudTrail events occur in a short period of time (e.g., < 1 hour) StopInstances (necessary, because the user data of an instance cannot be changed when it's running) ModifyInstanceAttribute with requestParameters.userData non-empty When not possible to perform such correlation, alerting on the second event only is an option. It's generally not expected that the user data of an EC2 instance changes often, especially with the popularity of immutable machine images, provisioned before instantiation.","title":"Detection"},{"location":"attack-techniques/AWS/aws.exfiltration.ec2-security-group-open-port-22-ingress/","text":"Open Ingress Port 22 on a Security Group Platform: AWS MITRE ATT&CK Tactics Exfiltration Description Opens ingress traffic on port 22 from the Internet (0.0.0.0/0). Warm-up : Create a VPC and a security group inside it. Detonation : Call ec2:AuthorizeSecurityGroupIngress to allow ingress traffic on port 22 from 0.0.0.0/0. Instructions Detonate with Stratus Red Team stratus detonate aws.exfiltration.ec2-security-group-open-port-22-ingress Detection You can use the CloudTrail event AuthorizeSecurityGroupIngress when: requestParameters.cidrIp is 0.0.0.0/0 (or an unknown external IP) and requestParameters.fromPort / requestParameters.toPort is not a commonly exposed port or corresponds to a known administrative protocol such as SSH or RDP","title":"Open Ingress Port 22 on a Security Group"},{"location":"attack-techniques/AWS/aws.exfiltration.ec2-security-group-open-port-22-ingress/#open-ingress-port-22-on-a-security-group","text":"Platform: AWS","title":"Open Ingress Port 22 on a Security Group"},{"location":"attack-techniques/AWS/aws.exfiltration.ec2-security-group-open-port-22-ingress/#mitre-attck-tactics","text":"Exfiltration","title":"MITRE ATT&amp;CK Tactics"},{"location":"attack-techniques/AWS/aws.exfiltration.ec2-security-group-open-port-22-ingress/#description","text":"Opens ingress traffic on port 22 from the Internet (0.0.0.0/0). Warm-up : Create a VPC and a security group inside it. Detonation : Call ec2:AuthorizeSecurityGroupIngress to allow ingress traffic on port 22 from 0.0.0.0/0.","title":"Description"},{"location":"attack-techniques/AWS/aws.exfiltration.ec2-security-group-open-port-22-ingress/#instructions","text":"Detonate with Stratus Red Team stratus detonate aws.exfiltration.ec2-security-group-open-port-22-ingress","title":"Instructions"},{"location":"attack-techniques/AWS/aws.exfiltration.ec2-security-group-open-port-22-ingress/#detection","text":"You can use the CloudTrail event AuthorizeSecurityGroupIngress when: requestParameters.cidrIp is 0.0.0.0/0 (or an unknown external IP) and requestParameters.fromPort / requestParameters.toPort is not a commonly exposed port or corresponds to a known administrative protocol such as SSH or RDP","title":"Detection"},{"location":"attack-techniques/AWS/aws.exfiltration.ec2-share-ami/","text":"Exfiltrate an AMI by Sharing It idempotent Platform: AWS MITRE ATT&CK Tactics Exfiltration Description Exfiltrates an AMI by sharing it with an external AWS account. Warm-up : Create an AMI. Detonation : Share the AMI with an external, fictitious AWS account. Instructions Detonate with Stratus Red Team stratus detonate aws.exfiltration.ec2-share-ami Detection Through CloudTrail's ModifyImageAttribute event, when requestParameters.launchPermission shows that the AMI was shared with a new or unknown AWS account, such as: \"requestParameters\": { \"launchPermission\": { \"add\": { \"items\": [{ \"userId\": \"012345678901\" }] } }, \"attributeType\": \"launchPermission\", \"imageId\": \"ami-0b87ea1d007078d18\" } An attacker can also make an AMI completely public. In this case, the item entry will look like {\"groups\":\"all\"} .","title":"Exfiltrate an AMI by Sharing It"},{"location":"attack-techniques/AWS/aws.exfiltration.ec2-share-ami/#exfiltrate-an-ami-by-sharing-it","text":"idempotent Platform: AWS","title":"Exfiltrate an AMI by Sharing It"},{"location":"attack-techniques/AWS/aws.exfiltration.ec2-share-ami/#mitre-attck-tactics","text":"Exfiltration","title":"MITRE ATT&amp;CK Tactics"},{"location":"attack-techniques/AWS/aws.exfiltration.ec2-share-ami/#description","text":"Exfiltrates an AMI by sharing it with an external AWS account. Warm-up : Create an AMI. Detonation : Share the AMI with an external, fictitious AWS account.","title":"Description"},{"location":"attack-techniques/AWS/aws.exfiltration.ec2-share-ami/#instructions","text":"Detonate with Stratus Red Team stratus detonate aws.exfiltration.ec2-share-ami","title":"Instructions"},{"location":"attack-techniques/AWS/aws.exfiltration.ec2-share-ami/#detection","text":"Through CloudTrail's ModifyImageAttribute event, when requestParameters.launchPermission shows that the AMI was shared with a new or unknown AWS account, such as: \"requestParameters\": { \"launchPermission\": { \"add\": { \"items\": [{ \"userId\": \"012345678901\" }] } }, \"attributeType\": \"launchPermission\", \"imageId\": \"ami-0b87ea1d007078d18\" } An attacker can also make an AMI completely public. In this case, the item entry will look like {\"groups\":\"all\"} .","title":"Detection"},{"location":"attack-techniques/AWS/aws.exfiltration.ec2-share-ebs-snapshot/","text":"Exfiltrate EBS Snapshot by Sharing It idempotent Platform: AWS MITRE ATT&CK Tactics Exfiltration Description Exfiltrates an EBS snapshot by sharing it with an external AWS account. Warm-up : Create an EBS volume and a snapshot. Detonation : Call ec2:ModifySnapshotAttribute to share the snapshot with an external, fictitious AWS account. Instructions Detonate with Stratus Red Team stratus detonate aws.exfiltration.ec2-share-ebs-snapshot Detection Through CloudTrail's ModifySnapshotAttribute event, when requestParameters.createVolumePermission shows that the EBS snapshot was shared with a new or unknown AWS account, such as: \"requestParameters\": { \"snapshotId\": \"snap-01b3f7d87a02559a1\", \"attributeType\": \"CREATE_VOLUME_PERMISSION\", \"createVolumePermission\": { \"add\": { \"items\": [{ \"userId\": \"111111111111\" }] } } } An attacker can also make an EBS snapshot completely public. In this case, the item entry will look like {\"groups\":\"all\"} .","title":"Exfiltrate EBS Snapshot by Sharing It"},{"location":"attack-techniques/AWS/aws.exfiltration.ec2-share-ebs-snapshot/#exfiltrate-ebs-snapshot-by-sharing-it","text":"idempotent Platform: AWS","title":"Exfiltrate EBS Snapshot by Sharing It"},{"location":"attack-techniques/AWS/aws.exfiltration.ec2-share-ebs-snapshot/#mitre-attck-tactics","text":"Exfiltration","title":"MITRE ATT&amp;CK Tactics"},{"location":"attack-techniques/AWS/aws.exfiltration.ec2-share-ebs-snapshot/#description","text":"Exfiltrates an EBS snapshot by sharing it with an external AWS account. Warm-up : Create an EBS volume and a snapshot. Detonation : Call ec2:ModifySnapshotAttribute to share the snapshot with an external, fictitious AWS account.","title":"Description"},{"location":"attack-techniques/AWS/aws.exfiltration.ec2-share-ebs-snapshot/#instructions","text":"Detonate with Stratus Red Team stratus detonate aws.exfiltration.ec2-share-ebs-snapshot","title":"Instructions"},{"location":"attack-techniques/AWS/aws.exfiltration.ec2-share-ebs-snapshot/#detection","text":"Through CloudTrail's ModifySnapshotAttribute event, when requestParameters.createVolumePermission shows that the EBS snapshot was shared with a new or unknown AWS account, such as: \"requestParameters\": { \"snapshotId\": \"snap-01b3f7d87a02559a1\", \"attributeType\": \"CREATE_VOLUME_PERMISSION\", \"createVolumePermission\": { \"add\": { \"items\": [{ \"userId\": \"111111111111\" }] } } } An attacker can also make an EBS snapshot completely public. In this case, the item entry will look like {\"groups\":\"all\"} .","title":"Detection"},{"location":"attack-techniques/AWS/aws.exfiltration.rds-share-snapshot/","text":"Exfiltrate RDS Snapshot by Sharing slow idempotent Platform: AWS MITRE ATT&CK Tactics Exfiltration Description Shares a RDS Snapshot with an external AWS account to simulate an attacker exfiltrating a database. Warm-up : Create a RDS Instance (slow, around 10 minutes) Create a RDS Snapshot Detonation : Call rds:ModifyDBSnapshotAttribute to share the snapshot with an external AWS account Instructions Detonate with Stratus Red Team stratus detonate aws.exfiltration.rds-share-snapshot Detection Through CloudTrail's ModifyDBSnapshotAttribute event, when both: requestParameters.attributeName is restore and, requestParameters.launchPermission shows that the RDS snapshot was shared with a new or unknown AWS account, such as: \"requestParameters\": { \"dBSnapshotIdentifier\": \"my-db-snapshot\", \"attributeName\": \"restore\" \"valuesToAdd\": [\"193672423079\"], } An attacker can also make an RDS snapshot completely public. In this case, the value of valuesToAdd is [\"all\"] .","title":"Exfiltrate RDS Snapshot by Sharing"},{"location":"attack-techniques/AWS/aws.exfiltration.rds-share-snapshot/#exfiltrate-rds-snapshot-by-sharing","text":"slow idempotent Platform: AWS","title":"Exfiltrate RDS Snapshot by Sharing"},{"location":"attack-techniques/AWS/aws.exfiltration.rds-share-snapshot/#mitre-attck-tactics","text":"Exfiltration","title":"MITRE ATT&amp;CK Tactics"},{"location":"attack-techniques/AWS/aws.exfiltration.rds-share-snapshot/#description","text":"Shares a RDS Snapshot with an external AWS account to simulate an attacker exfiltrating a database. Warm-up : Create a RDS Instance (slow, around 10 minutes) Create a RDS Snapshot Detonation : Call rds:ModifyDBSnapshotAttribute to share the snapshot with an external AWS account","title":"Description"},{"location":"attack-techniques/AWS/aws.exfiltration.rds-share-snapshot/#instructions","text":"Detonate with Stratus Red Team stratus detonate aws.exfiltration.rds-share-snapshot","title":"Instructions"},{"location":"attack-techniques/AWS/aws.exfiltration.rds-share-snapshot/#detection","text":"Through CloudTrail's ModifyDBSnapshotAttribute event, when both: requestParameters.attributeName is restore and, requestParameters.launchPermission shows that the RDS snapshot was shared with a new or unknown AWS account, such as: \"requestParameters\": { \"dBSnapshotIdentifier\": \"my-db-snapshot\", \"attributeName\": \"restore\" \"valuesToAdd\": [\"193672423079\"], } An attacker can also make an RDS snapshot completely public. In this case, the value of valuesToAdd is [\"all\"] .","title":"Detection"},{"location":"attack-techniques/AWS/aws.exfiltration.s3-backdoor-bucket-policy/","text":"Backdoor an S3 Bucket via its Bucket Policy idempotent Platform: AWS MITRE ATT&CK Tactics Exfiltration Description Exfiltrates data from an S3 bucket by backdooring its Bucket Policy to allow access from an external, fictitious AWS account. Warm-up : Create an S3 bucket. Detonation : Backdoor the S3 Bucket Policy by setting the following Bucket Policy: { \"Version\":\"2012-10-17\", \"Statement\":[ { \"Effect\": \"Allow\", \"Principal\": { \"AWS\":\"arn:aws:iam::193672423079:root\" }, \"Action\": [ \"s3:GetObject\", \"s3:GetBucketLocation\", \"s3:ListBucket\" ], \"Resource\": [ \"arn:aws:s3:::%s/*\", \"arn:aws:s3:::%s\" ] } ] } Instructions Detonate with Stratus Red Team stratus detonate aws.exfiltration.s3-backdoor-bucket-policy Detection Using CloudTrail's PutBucketPolicy event. Through GuardDuty's Policy:S3/BucketAnonymousAccessGranted finding, if the S3 bucket was made public (and not only shared with an attacker-controlled AWS account). Through IAM Access Analyzer , which generates a finding when an S3 bucket is made public or accessible from another account.","title":"Backdoor an S3 Bucket via its Bucket Policy"},{"location":"attack-techniques/AWS/aws.exfiltration.s3-backdoor-bucket-policy/#backdoor-an-s3-bucket-via-its-bucket-policy","text":"idempotent Platform: AWS","title":"Backdoor an S3 Bucket via its Bucket Policy"},{"location":"attack-techniques/AWS/aws.exfiltration.s3-backdoor-bucket-policy/#mitre-attck-tactics","text":"Exfiltration","title":"MITRE ATT&amp;CK Tactics"},{"location":"attack-techniques/AWS/aws.exfiltration.s3-backdoor-bucket-policy/#description","text":"Exfiltrates data from an S3 bucket by backdooring its Bucket Policy to allow access from an external, fictitious AWS account. Warm-up : Create an S3 bucket. Detonation : Backdoor the S3 Bucket Policy by setting the following Bucket Policy: { \"Version\":\"2012-10-17\", \"Statement\":[ { \"Effect\": \"Allow\", \"Principal\": { \"AWS\":\"arn:aws:iam::193672423079:root\" }, \"Action\": [ \"s3:GetObject\", \"s3:GetBucketLocation\", \"s3:ListBucket\" ], \"Resource\": [ \"arn:aws:s3:::%s/*\", \"arn:aws:s3:::%s\" ] } ] }","title":"Description"},{"location":"attack-techniques/AWS/aws.exfiltration.s3-backdoor-bucket-policy/#instructions","text":"Detonate with Stratus Red Team stratus detonate aws.exfiltration.s3-backdoor-bucket-policy","title":"Instructions"},{"location":"attack-techniques/AWS/aws.exfiltration.s3-backdoor-bucket-policy/#detection","text":"Using CloudTrail's PutBucketPolicy event. Through GuardDuty's Policy:S3/BucketAnonymousAccessGranted finding, if the S3 bucket was made public (and not only shared with an attacker-controlled AWS account). Through IAM Access Analyzer , which generates a finding when an S3 bucket is made public or accessible from another account.","title":"Detection"},{"location":"attack-techniques/AWS/aws.persistence.iam-backdoor-role/","text":"Backdoor an IAM Role idempotent Platform: AWS MITRE ATT&CK Tactics Persistence Description Establishes persistence by backdooring an existing IAM role, allowing it to be assumed from an external AWS account. Warm-up : Create an IAM role. Detonation : Update the assume role policy of the IAM role to backdoor it, making it accessible from an external, fictitious AWS account: { \"Version\": \"2012-10-17\", \"Statement\": [ { \"Effect\": \"Allow\", \"Principal\": { \"Service\": \"ec2.amazonaws.com\" }, \"Action\": \"sts:AssumeRole\" }, { \"Effect\": \"Allow\", \"Principal\": { \"AWS\": \"arn:aws:iam::193672423079:root\" }, \"Action\": \"sts:AssumeRole\" } ] } Instructions Detonate with Stratus Red Team stratus detonate aws.persistence.iam-backdoor-role Detection Using CloudTrail's UpdateAssumeRolePolicy event. Through IAM Access Analyzer , which generates a finding when a role can be assumed from a new AWS account or publicly.","title":"Backdoor an IAM Role"},{"location":"attack-techniques/AWS/aws.persistence.iam-backdoor-role/#backdoor-an-iam-role","text":"idempotent Platform: AWS","title":"Backdoor an IAM Role"},{"location":"attack-techniques/AWS/aws.persistence.iam-backdoor-role/#mitre-attck-tactics","text":"Persistence","title":"MITRE ATT&amp;CK Tactics"},{"location":"attack-techniques/AWS/aws.persistence.iam-backdoor-role/#description","text":"Establishes persistence by backdooring an existing IAM role, allowing it to be assumed from an external AWS account. Warm-up : Create an IAM role. Detonation : Update the assume role policy of the IAM role to backdoor it, making it accessible from an external, fictitious AWS account: { \"Version\": \"2012-10-17\", \"Statement\": [ { \"Effect\": \"Allow\", \"Principal\": { \"Service\": \"ec2.amazonaws.com\" }, \"Action\": \"sts:AssumeRole\" }, { \"Effect\": \"Allow\", \"Principal\": { \"AWS\": \"arn:aws:iam::193672423079:root\" }, \"Action\": \"sts:AssumeRole\" } ] }","title":"Description"},{"location":"attack-techniques/AWS/aws.persistence.iam-backdoor-role/#instructions","text":"Detonate with Stratus Red Team stratus detonate aws.persistence.iam-backdoor-role","title":"Instructions"},{"location":"attack-techniques/AWS/aws.persistence.iam-backdoor-role/#detection","text":"Using CloudTrail's UpdateAssumeRolePolicy event. Through IAM Access Analyzer , which generates a finding when a role can be assumed from a new AWS account or publicly.","title":"Detection"},{"location":"attack-techniques/AWS/aws.persistence.iam-backdoor-user/","text":"Create an Access Key on an IAM User Platform: AWS MITRE ATT&CK Tactics Persistence Privilege Escalation Description Establishes persistence by creating an access key on an existing IAM user. Warm-up : Create an IAM user. Detonation : Create an IAM access key on the user. Instructions Detonate with Stratus Red Team stratus detonate aws.persistence.iam-backdoor-user Detection Through CloudTrail's CreateAccessKey event. This event can hardly be considered suspicious by itself, unless correlated with other indicators. '","title":"Create an Access Key on an IAM User"},{"location":"attack-techniques/AWS/aws.persistence.iam-backdoor-user/#create-an-access-key-on-an-iam-user","text":"Platform: AWS","title":"Create an Access Key on an IAM User"},{"location":"attack-techniques/AWS/aws.persistence.iam-backdoor-user/#mitre-attck-tactics","text":"Persistence Privilege Escalation","title":"MITRE ATT&amp;CK Tactics"},{"location":"attack-techniques/AWS/aws.persistence.iam-backdoor-user/#description","text":"Establishes persistence by creating an access key on an existing IAM user. Warm-up : Create an IAM user. Detonation : Create an IAM access key on the user.","title":"Description"},{"location":"attack-techniques/AWS/aws.persistence.iam-backdoor-user/#instructions","text":"Detonate with Stratus Red Team stratus detonate aws.persistence.iam-backdoor-user","title":"Instructions"},{"location":"attack-techniques/AWS/aws.persistence.iam-backdoor-user/#detection","text":"Through CloudTrail's CreateAccessKey event. This event can hardly be considered suspicious by itself, unless correlated with other indicators. '","title":"Detection"},{"location":"attack-techniques/AWS/aws.persistence.iam-create-admin-user/","text":"Create an administrative IAM User Platform: AWS MITRE ATT&CK Tactics Persistence Privilege Escalation Description Establishes persistence by creating a new IAM user with administrative permissions. Warm-up : None. Detonation : Create the IAM user and attach the 'AdministratorAccess' managed IAM policy to it. Instructions Detonate with Stratus Red Team stratus detonate aws.persistence.iam-create-admin-user Detection Through CloudTrail's CreateUser , AttachUserPolicy and CreateAccessKey events. While matching on these events may be impractical and prone to false positives in most environments, the following can help to craft more precise detections: Identify a call to CreateUser closely followed by AttachUserPolicy with an administrator policy. Identify a call to CreateUser resulting in an access denied error.","title":"Create an administrative IAM User"},{"location":"attack-techniques/AWS/aws.persistence.iam-create-admin-user/#create-an-administrative-iam-user","text":"Platform: AWS","title":"Create an administrative IAM User"},{"location":"attack-techniques/AWS/aws.persistence.iam-create-admin-user/#mitre-attck-tactics","text":"Persistence Privilege Escalation","title":"MITRE ATT&amp;CK Tactics"},{"location":"attack-techniques/AWS/aws.persistence.iam-create-admin-user/#description","text":"Establishes persistence by creating a new IAM user with administrative permissions. Warm-up : None. Detonation : Create the IAM user and attach the 'AdministratorAccess' managed IAM policy to it.","title":"Description"},{"location":"attack-techniques/AWS/aws.persistence.iam-create-admin-user/#instructions","text":"Detonate with Stratus Red Team stratus detonate aws.persistence.iam-create-admin-user","title":"Instructions"},{"location":"attack-techniques/AWS/aws.persistence.iam-create-admin-user/#detection","text":"Through CloudTrail's CreateUser , AttachUserPolicy and CreateAccessKey events. While matching on these events may be impractical and prone to false positives in most environments, the following can help to craft more precise detections: Identify a call to CreateUser closely followed by AttachUserPolicy with an administrator policy. Identify a call to CreateUser resulting in an access denied error.","title":"Detection"},{"location":"attack-techniques/AWS/aws.persistence.iam-create-user-login-profile/","text":"Create a Login Profile on an IAM User Platform: AWS MITRE ATT&CK Tactics Persistence Privilege Escalation Description Establishes persistence by creating a Login Profile on an existing IAM user. This allows an attacker to access an IAM user intended to be used programmatically through the AWS console usual login process. Warm-up : Create an IAM user Detonation : Create an IAM Login Profile on the user Instructions Detonate with Stratus Red Team stratus detonate aws.persistence.iam-create-user-login-profile Detection Through CloudTrail's CreateLoginProfile or UpdateLoginProfile events. In particular, it's suspicious when these events occur on IAM users intended to be used programmatically.","title":"Create a Login Profile on an IAM User"},{"location":"attack-techniques/AWS/aws.persistence.iam-create-user-login-profile/#create-a-login-profile-on-an-iam-user","text":"Platform: AWS","title":"Create a Login Profile on an IAM User"},{"location":"attack-techniques/AWS/aws.persistence.iam-create-user-login-profile/#mitre-attck-tactics","text":"Persistence Privilege Escalation","title":"MITRE ATT&amp;CK Tactics"},{"location":"attack-techniques/AWS/aws.persistence.iam-create-user-login-profile/#description","text":"Establishes persistence by creating a Login Profile on an existing IAM user. This allows an attacker to access an IAM user intended to be used programmatically through the AWS console usual login process. Warm-up : Create an IAM user Detonation : Create an IAM Login Profile on the user","title":"Description"},{"location":"attack-techniques/AWS/aws.persistence.iam-create-user-login-profile/#instructions","text":"Detonate with Stratus Red Team stratus detonate aws.persistence.iam-create-user-login-profile","title":"Instructions"},{"location":"attack-techniques/AWS/aws.persistence.iam-create-user-login-profile/#detection","text":"Through CloudTrail's CreateLoginProfile or UpdateLoginProfile events. In particular, it's suspicious when these events occur on IAM users intended to be used programmatically.","title":"Detection"},{"location":"attack-techniques/AWS/aws.persistence.lambda-backdoor-function/","text":"Backdoor Lambda Function Through Resource-Based Policy Platform: AWS MITRE ATT&CK Tactics Persistence Description Establishes persistence by backdooring a lambda function to allow its invocation from an external AWS account. Warm-up : Create a Lambda function. Detonation : Modify the Lambda function resource-base policy to allow lambda:InvokeFunction from an external, fictitious AWS account. Instructions Detonate with Stratus Red Team stratus detonate aws.persistence.lambda-backdoor-function Detection Using CloudTrail's AddPermission20150331 and AddPermission20150331v2 events. Through IAM Access Analyzer , which triggers a finding when permissions are added to a Lambda function making it public or accessible from another account.","title":"Backdoor Lambda Function Through Resource-Based Policy"},{"location":"attack-techniques/AWS/aws.persistence.lambda-backdoor-function/#backdoor-lambda-function-through-resource-based-policy","text":"Platform: AWS","title":"Backdoor Lambda Function Through Resource-Based Policy"},{"location":"attack-techniques/AWS/aws.persistence.lambda-backdoor-function/#mitre-attck-tactics","text":"Persistence","title":"MITRE ATT&amp;CK Tactics"},{"location":"attack-techniques/AWS/aws.persistence.lambda-backdoor-function/#description","text":"Establishes persistence by backdooring a lambda function to allow its invocation from an external AWS account. Warm-up : Create a Lambda function. Detonation : Modify the Lambda function resource-base policy to allow lambda:InvokeFunction from an external, fictitious AWS account.","title":"Description"},{"location":"attack-techniques/AWS/aws.persistence.lambda-backdoor-function/#instructions","text":"Detonate with Stratus Red Team stratus detonate aws.persistence.lambda-backdoor-function","title":"Instructions"},{"location":"attack-techniques/AWS/aws.persistence.lambda-backdoor-function/#detection","text":"Using CloudTrail's AddPermission20150331 and AddPermission20150331v2 events. Through IAM Access Analyzer , which triggers a finding when permissions are added to a Lambda function making it public or accessible from another account.","title":"Detection"},{"location":"attack-techniques/kubernetes/","text":"kubernetes This page contains the Stratus attack techniques for kubernetes, grouped by MITRE ATT&CK Tactic. Note that some Stratus attack techniques may correspond to more than a single ATT&CK Tactic. Privilege Escalation Container breakout via hostPath volume mount","title":"kubernetes"},{"location":"attack-techniques/kubernetes/#kubernetes","text":"This page contains the Stratus attack techniques for kubernetes, grouped by MITRE ATT&CK Tactic. Note that some Stratus attack techniques may correspond to more than a single ATT&CK Tactic.","title":"kubernetes"},{"location":"attack-techniques/kubernetes/#privilege-escalation","text":"Container breakout via hostPath volume mount","title":"Privilege Escalation"},{"location":"attack-techniques/kubernetes/k8s.privilege-escalation.hostpath-volume/","text":"Container breakout via hostPath volume mount Platform: kubernetes MITRE ATT&CK Tactics Privilege Escalation Description Creates a Pod with the entire node root filesystem as a hostPath volume mount References: https://attack.mitre.org/techniques/T1611/ https://www.youtube.com/watch?v=gtaaONq-XGY Warm-up : Creates the Stratus Red Team namespace Detonation : Create a privileged busybox pod with the node root filesystem mounted at \"/host\" that reads \"/etc/passwd\" from the host filesystem Instructions Detonate with Stratus Red Team stratus detonate k8s.privilege-escalation.hostpath-volume","title":"Container breakout via hostPath volume mount"},{"location":"attack-techniques/kubernetes/k8s.privilege-escalation.hostpath-volume/#container-breakout-via-hostpath-volume-mount","text":"Platform: kubernetes","title":"Container breakout via hostPath volume mount"},{"location":"attack-techniques/kubernetes/k8s.privilege-escalation.hostpath-volume/#mitre-attck-tactics","text":"Privilege Escalation","title":"MITRE ATT&amp;CK Tactics"},{"location":"attack-techniques/kubernetes/k8s.privilege-escalation.hostpath-volume/#description","text":"Creates a Pod with the entire node root filesystem as a hostPath volume mount References: https://attack.mitre.org/techniques/T1611/ https://www.youtube.com/watch?v=gtaaONq-XGY Warm-up : Creates the Stratus Red Team namespace Detonation : Create a privileged busybox pod with the node root filesystem mounted at \"/host\" that reads \"/etc/passwd\" from the host filesystem","title":"Description"},{"location":"attack-techniques/kubernetes/k8s.privilege-escalation.hostpath-volume/#instructions","text":"Detonate with Stratus Red Team stratus detonate k8s.privilege-escalation.hostpath-volume","title":"Instructions"},{"location":"user-guide/examples/","text":"Examples This page contains a full example of using Stratus Red Team. Example 1: Basic usage Authenticating to AWS First, we'll authenticate to AWS using aws-vault : $ aws-vault exec sandbox-account # If using an IAM user, use instead: aws-vault exec sandbox-account --no-session $ aws sts get-caller-identity { \"UserId\" : \"AIDA254BBSGPGUZJKQWRD\" , \"Account\" : \"012345678912\" , \"Arn\" : \"arn:aws:iam::012345678912:user/christophe\" } Stratus Red Team should support any authentication option supported by the AWS Go SDK v2. The general rule of thumb is: if you can run aws sts get-caller-identity , you can run Stratus Red Team. Listing available Attack Techniques Let's say we want to confirm our security products identify common persistence mechanisms in our AWS account. Let's ask Stratus Red Team for the relevant available attack techniques: $ stratus list --platform aws --mitre-attack-tactic persistence +-----------------------------------------------+-----------------------------------------+----------+----------------------+ | TECHNIQUE ID | TECHNIQUE NAME | PLATFORM | MITRE ATT&CK TACTIC | +-----------------------------------------------+-----------------------------------------+----------+----------------------+ | aws.persistence.iam-backdoor-role | Backdoor an existing IAM Role | AWS | Persistence | | aws.persistence.iam-backdoor-user | Create an IAM Access Key on an IAM User | AWS | Persistence | | | | | Privilege Escalation | | aws.persistence.iam-create-user-login-profile | Create a Login Profile on an IAM user | AWS | Persistence | | | | | Privilege Escalation | | aws.persistence.iam-create-admin-user | Create an administrative IAM User | AWS | Persistence | | | | | Privilege Escalation | +-----------------------------------------------+-----------------------------------------+----------+----------------------+ Detonating an attack technique We're interested in aws.persistence.iam-backdoor-role , an attack technique that backdoors an existing IAM role to add a trust relationship with a malicious AWS account. Let's retrieve more information about the technique, either through its automatically-generated documentation , or by running: $ stratus show aws.persistence.iam-backdoor-role Establishes persistence by backdooring an existing IAM role, allowing it to be assumed from an external AWS account. Warm-up: Creates the prerequisite IAM role. Detonation: Updates the assume role policy of the IAM role to backdoor it. We now know that Stratus Red Team will first create an IAM role in the warm-up phase. In the detonation phase, it will backdoor the role. We could choose to perform the warm-up and detonation phase separately - but for simplicity, let's do it all together: $ stratus detonate aws.persistence.iam-backdoor-role 2022/01/19 10:28:08 Checking your authentication against the AWS API 2022/01/19 10:28:09 Warming up aws.persistence.iam-backdoor-role 2022/01/19 10:28:09 Initializing Terraform 2022/01/19 10:28:18 Applying Terraform 2022/01/19 10:28:32 Backdooring IAM role by allowing sts:AssumeRole from an extenral AWS account Great! The attack technique has been executed against our AWS account. We can verify this using: $ stratus status +------------------------------------+-------------------------------+-----------+ | ID | NAME | STATUS | +------------------------------------+-------------------------------------------+ | aws.persistence.iam-backdoor-role | Backdoor an existing IAM Role | DETONATED | ... Viewing the resulting resource If we open the AWS console and go to the role that Stratus Red Team backdoored, we can see the malicious role trust policy: { \"Version\" : \"2012-10-17\" , \"Statement\" : [ { \"Effect\" : \"Allow\" , \"Principal\" : { \"Service\" : \"ec2.amazonaws.com\" }, \"Action\" : \"sts:AssumeRole\" }, { \"Effect\" : \"Allow\" , \"Principal\" : { \"AWS\" : \"arn:aws:iam::193672423079:root\" }, \"Action\" : \"sts:AssumeRole\" } ] } Cleaning up When using stratus detonate , the resources spun up are not cleaned up by default - you'd have to pass the --cleanup flag for that. We can clean up any resources creates by Stratus Red Team using: stratus cleanup aws.persistence.iam-backdoor-role Example 2: Advanced usage In this example, we want to prepare our live environment with the prerequisites ahead of time - say, a few hours before detonating our attack techniques. We start by warming up the techniques we're interested in: stratus warmup aws.defense-evasion.cloudtrail-stop aws.defense-evasion.vpc-remove-flow-logs aws.persistence.iam-backdoor-user We now have the prerequisites ready: CloudTrail trail arn:aws:cloudtrail:us-east-1:0123456789012:trail/my-cloudtrail-trail ready VPC Flow Logs fl-0ef2f69f9799cf52e in VPC vpc-072ec3075f9b5046a ready IAM user sample-legit-user ready At this point, we can choose to detonate these attack techniques at any point we want. We can do it right away, or in a few hours / days: stratus detonate aws.defense-evasion.cloudtrail-stop aws.defense-evasion.vpc-remove-flow-logs aws.persistence.iam-backdoor-user Stopping CloudTrail trail my-cloudtrail-trail Removing VPC Flow Logs fl-0ef2f69f9799cf52e in VPC vpc-072ec3075f9b5046a Creating access key on legit IAM user to simulate backdoor Now, say we want to replay (i.e., detonate again) an attack technique a few times, for testing and to iterate building our threat detection rules on the side: stratus detonate aws.persistence.iam-backdoor-user You will notice that the second call raises an error: aws.persistence.iam-backdoor-user has already been detonated and is not idempotent. Revert it with 'stratus revert' before detonating it again, or use --force That's because the detonation of this attack technique is not idempotent, meaning it cannot be detonated multiple times without being reverted. Before re-detonating this technique, we need to revert it: stratus revert aws.persistence.iam-backdoor-user 2022/01/19 15:43:35 Reverting detonation of technique aws.persistence.iam-backdoor-user 2022/01/19 15:43:35 Removing access key from IAM user sample-legit-user 2022/01/19 15:43:36 Removing access key AKIA254BBSGPJNHEDHNR +-----------------------------------+-----------------------------------------+--------+ | ID | NAME | STATUS | +-----------------------------------+-----------------------------------------+--------+ | aws.persistence.iam-backdoor-user | Create an IAM Access Key on an IAM User | WARM | +-----------------------------------+-----------------------------------------+--------+ Our attack technique is now WARM , we can detonate it again: stratus detonate aws.persistence.iam-backdoor-user Generally, we can detonate then revert an attack technique indefinitely: while true ; do stratus detonate aws.persistence.iam-backdoor-user stratus revert aws.persistence.iam-backdoor-user sleep 1 done Once we are done with our testing, we can clean up our techniques. Cleaning up a technique will revert its detonation logic (if applicable), then nuke all its prerequisite resources and infrastructure: stratus cleanup aws.defense-evasion.cloudtrail-stop aws.defense-evasion.vpc-remove-flow-logs aws.persistence.iam-backdoor-user Or, more succinctly: stratus cleanup --all","title":"Examples"},{"location":"user-guide/examples/#examples","text":"This page contains a full example of using Stratus Red Team.","title":"Examples"},{"location":"user-guide/examples/#example-1-basic-usage","text":"","title":"Example 1: Basic usage"},{"location":"user-guide/examples/#authenticating-to-aws","text":"First, we'll authenticate to AWS using aws-vault : $ aws-vault exec sandbox-account # If using an IAM user, use instead: aws-vault exec sandbox-account --no-session $ aws sts get-caller-identity { \"UserId\" : \"AIDA254BBSGPGUZJKQWRD\" , \"Account\" : \"012345678912\" , \"Arn\" : \"arn:aws:iam::012345678912:user/christophe\" } Stratus Red Team should support any authentication option supported by the AWS Go SDK v2. The general rule of thumb is: if you can run aws sts get-caller-identity , you can run Stratus Red Team.","title":"Authenticating to AWS"},{"location":"user-guide/examples/#listing-available-attack-techniques","text":"Let's say we want to confirm our security products identify common persistence mechanisms in our AWS account. Let's ask Stratus Red Team for the relevant available attack techniques: $ stratus list --platform aws --mitre-attack-tactic persistence +-----------------------------------------------+-----------------------------------------+----------+----------------------+ | TECHNIQUE ID | TECHNIQUE NAME | PLATFORM | MITRE ATT&CK TACTIC | +-----------------------------------------------+-----------------------------------------+----------+----------------------+ | aws.persistence.iam-backdoor-role | Backdoor an existing IAM Role | AWS | Persistence | | aws.persistence.iam-backdoor-user | Create an IAM Access Key on an IAM User | AWS | Persistence | | | | | Privilege Escalation | | aws.persistence.iam-create-user-login-profile | Create a Login Profile on an IAM user | AWS | Persistence | | | | | Privilege Escalation | | aws.persistence.iam-create-admin-user | Create an administrative IAM User | AWS | Persistence | | | | | Privilege Escalation | +-----------------------------------------------+-----------------------------------------+----------+----------------------+","title":"Listing available Attack Techniques"},{"location":"user-guide/examples/#detonating-an-attack-technique","text":"We're interested in aws.persistence.iam-backdoor-role , an attack technique that backdoors an existing IAM role to add a trust relationship with a malicious AWS account. Let's retrieve more information about the technique, either through its automatically-generated documentation , or by running: $ stratus show aws.persistence.iam-backdoor-role Establishes persistence by backdooring an existing IAM role, allowing it to be assumed from an external AWS account. Warm-up: Creates the prerequisite IAM role. Detonation: Updates the assume role policy of the IAM role to backdoor it. We now know that Stratus Red Team will first create an IAM role in the warm-up phase. In the detonation phase, it will backdoor the role. We could choose to perform the warm-up and detonation phase separately - but for simplicity, let's do it all together: $ stratus detonate aws.persistence.iam-backdoor-role 2022/01/19 10:28:08 Checking your authentication against the AWS API 2022/01/19 10:28:09 Warming up aws.persistence.iam-backdoor-role 2022/01/19 10:28:09 Initializing Terraform 2022/01/19 10:28:18 Applying Terraform 2022/01/19 10:28:32 Backdooring IAM role by allowing sts:AssumeRole from an extenral AWS account Great! The attack technique has been executed against our AWS account. We can verify this using: $ stratus status +------------------------------------+-------------------------------+-----------+ | ID | NAME | STATUS | +------------------------------------+-------------------------------------------+ | aws.persistence.iam-backdoor-role | Backdoor an existing IAM Role | DETONATED | ...","title":"Detonating an attack technique"},{"location":"user-guide/examples/#viewing-the-resulting-resource","text":"If we open the AWS console and go to the role that Stratus Red Team backdoored, we can see the malicious role trust policy: { \"Version\" : \"2012-10-17\" , \"Statement\" : [ { \"Effect\" : \"Allow\" , \"Principal\" : { \"Service\" : \"ec2.amazonaws.com\" }, \"Action\" : \"sts:AssumeRole\" }, { \"Effect\" : \"Allow\" , \"Principal\" : { \"AWS\" : \"arn:aws:iam::193672423079:root\" }, \"Action\" : \"sts:AssumeRole\" } ] }","title":"Viewing the resulting resource"},{"location":"user-guide/examples/#cleaning-up","text":"When using stratus detonate , the resources spun up are not cleaned up by default - you'd have to pass the --cleanup flag for that. We can clean up any resources creates by Stratus Red Team using: stratus cleanup aws.persistence.iam-backdoor-role","title":"Cleaning up"},{"location":"user-guide/examples/#example-2-advanced-usage","text":"In this example, we want to prepare our live environment with the prerequisites ahead of time - say, a few hours before detonating our attack techniques. We start by warming up the techniques we're interested in: stratus warmup aws.defense-evasion.cloudtrail-stop aws.defense-evasion.vpc-remove-flow-logs aws.persistence.iam-backdoor-user We now have the prerequisites ready: CloudTrail trail arn:aws:cloudtrail:us-east-1:0123456789012:trail/my-cloudtrail-trail ready VPC Flow Logs fl-0ef2f69f9799cf52e in VPC vpc-072ec3075f9b5046a ready IAM user sample-legit-user ready At this point, we can choose to detonate these attack techniques at any point we want. We can do it right away, or in a few hours / days: stratus detonate aws.defense-evasion.cloudtrail-stop aws.defense-evasion.vpc-remove-flow-logs aws.persistence.iam-backdoor-user Stopping CloudTrail trail my-cloudtrail-trail Removing VPC Flow Logs fl-0ef2f69f9799cf52e in VPC vpc-072ec3075f9b5046a Creating access key on legit IAM user to simulate backdoor Now, say we want to replay (i.e., detonate again) an attack technique a few times, for testing and to iterate building our threat detection rules on the side: stratus detonate aws.persistence.iam-backdoor-user You will notice that the second call raises an error: aws.persistence.iam-backdoor-user has already been detonated and is not idempotent. Revert it with 'stratus revert' before detonating it again, or use --force That's because the detonation of this attack technique is not idempotent, meaning it cannot be detonated multiple times without being reverted. Before re-detonating this technique, we need to revert it: stratus revert aws.persistence.iam-backdoor-user 2022/01/19 15:43:35 Reverting detonation of technique aws.persistence.iam-backdoor-user 2022/01/19 15:43:35 Removing access key from IAM user sample-legit-user 2022/01/19 15:43:36 Removing access key AKIA254BBSGPJNHEDHNR +-----------------------------------+-----------------------------------------+--------+ | ID | NAME | STATUS | +-----------------------------------+-----------------------------------------+--------+ | aws.persistence.iam-backdoor-user | Create an IAM Access Key on an IAM User | WARM | +-----------------------------------+-----------------------------------------+--------+ Our attack technique is now WARM , we can detonate it again: stratus detonate aws.persistence.iam-backdoor-user Generally, we can detonate then revert an attack technique indefinitely: while true ; do stratus detonate aws.persistence.iam-backdoor-user stratus revert aws.persistence.iam-backdoor-user sleep 1 done Once we are done with our testing, we can clean up our techniques. Cleaning up a technique will revert its detonation logic (if applicable), then nuke all its prerequisite resources and infrastructure: stratus cleanup aws.defense-evasion.cloudtrail-stop aws.defense-evasion.vpc-remove-flow-logs aws.persistence.iam-backdoor-user Or, more succinctly: stratus cleanup --all","title":"Example 2: Advanced usage"},{"location":"user-guide/getting-started/","text":"Getting Started Installation Mac OS: brew tap \"datadog/stratus-red-team\" \"https://github.com/DataDog/stratus-red-team\" brew install datadog/stratus-red-team/stratus-red-team\u2021 Linux / Windows / macOS: Download a pre-built binary . Docker: IMAGE = \"ghcr.io/datadog/stratus-red-team\" alias stratus = \"docker run --rm -v $HOME /.stratus-red-team/:/root/.stratus-red-team/ -e AWS_ACCESS_KEY_ID -e AWS_SECRET_ACCESS_KEY -e AWS_SESSION_TOKEN -e AWS_DEFAULT_REGION $IMAGE \" Concepts An attack technique is a granular TTP that has prerequisites infrastructure or configuration. You can see the list of attack techniques supported by Stratus Red Team here . Warming up an attack technique means making sure its prerequisites are met, without detonating it. Warm-up is a preparation phase, before executing the actual attack. Behind the scenes, Stratus Red Team transparently uses Terraform 1 to spin up and tear down the prerequisites of each attack technique. Detonating an attack technique means executing it against a live environment, for instance against a test AWS account. Reverting an attack technique means \"cancelling\" its detonation, when it had a side effect. Cleaning up an attack technique means nuking all its prerequisites and making sure no resource is left in your environment. An attack technique is idempotent if it can be detonated multiple times without reverting it. Example Let's take an example with the attack technique Exfiltrate EBS Snapshot through Snapshot Sharing . Warm-up : Create an EBS volume and a snapshot of it Detonation : Share the EBS snapshot with an external AWS account Revert : Unshare the EBS snapshot with the external AWS account Clean-up : Remove the EBS volume and its snapshot State Machine The diagram below illustrates the different states in which an attack technique can be. State Machine of a Stratus Attack Technique Sample Usage Stratus Red Team is a self-contained Go binary, embedding all the attack techniques it supports emulating. You can list available attack techniques using: stratus list Detonating a specific attack technique is as simple as running: stratus detonate aws.exfiltration.ec2-share-ebs-snapshot You will get an output similar to: 2022/01/18 22:32:11 Checking your authentication against the AWS API 2022/01/18 22:32:12 Warming up aws.exfiltration.ec2-share-ebs-snapshot 2022/01/18 22:32:12 Initializing Terraform 2022/01/18 22:32:19 Applying Terraform 2022/01/18 22:32:43 Sharing the volume snapshot with an external AWS account ID... You can then clean up any leftovers from the technique, which in this case will remove the EBS volume and EBS snapshot: stratus cleanup aws.exfiltration.ec2-share-ebs-snapshot For more information, see Usage , Examples and the Command Reference . Connecting to your cloud account Stratus Red Team currently supports only AWS. In order to use Stratus attack techniques against AWS, you need to be authenticated prior to running it, for instance: Using aws-vault Using static credentials in ~/.aws/config , and setting your desired AWS profile using export AWS_PROFILE=my-profile Warning Stratus Red Team is supposed to be used against a sandbox cloud account that does not handle production workloads or infrastructure. Encountering issues? See our troubleshooting page, or open an issue . While Stratus Red Team uses Terraform under the hood, it doesn't mess with your current Terraform install nor does it require you to install Terraform as a prerequisite. Stratus Red Team will download its own Terraform binary in $HOME/.stratus-red-team . \u21a9","title":"Getting Started"},{"location":"user-guide/getting-started/#getting-started","text":"","title":"Getting Started"},{"location":"user-guide/getting-started/#installation","text":"Mac OS: brew tap \"datadog/stratus-red-team\" \"https://github.com/DataDog/stratus-red-team\" brew install datadog/stratus-red-team/stratus-red-team\u2021 Linux / Windows / macOS: Download a pre-built binary . Docker: IMAGE = \"ghcr.io/datadog/stratus-red-team\" alias stratus = \"docker run --rm -v $HOME /.stratus-red-team/:/root/.stratus-red-team/ -e AWS_ACCESS_KEY_ID -e AWS_SECRET_ACCESS_KEY -e AWS_SESSION_TOKEN -e AWS_DEFAULT_REGION $IMAGE \"","title":"Installation"},{"location":"user-guide/getting-started/#concepts","text":"An attack technique is a granular TTP that has prerequisites infrastructure or configuration. You can see the list of attack techniques supported by Stratus Red Team here . Warming up an attack technique means making sure its prerequisites are met, without detonating it. Warm-up is a preparation phase, before executing the actual attack. Behind the scenes, Stratus Red Team transparently uses Terraform 1 to spin up and tear down the prerequisites of each attack technique. Detonating an attack technique means executing it against a live environment, for instance against a test AWS account. Reverting an attack technique means \"cancelling\" its detonation, when it had a side effect. Cleaning up an attack technique means nuking all its prerequisites and making sure no resource is left in your environment. An attack technique is idempotent if it can be detonated multiple times without reverting it.","title":"Concepts"},{"location":"user-guide/getting-started/#example","text":"Let's take an example with the attack technique Exfiltrate EBS Snapshot through Snapshot Sharing . Warm-up : Create an EBS volume and a snapshot of it Detonation : Share the EBS snapshot with an external AWS account Revert : Unshare the EBS snapshot with the external AWS account Clean-up : Remove the EBS volume and its snapshot","title":"Example"},{"location":"user-guide/getting-started/#state-machine","text":"The diagram below illustrates the different states in which an attack technique can be. State Machine of a Stratus Attack Technique","title":"State Machine"},{"location":"user-guide/getting-started/#sample-usage","text":"Stratus Red Team is a self-contained Go binary, embedding all the attack techniques it supports emulating. You can list available attack techniques using: stratus list Detonating a specific attack technique is as simple as running: stratus detonate aws.exfiltration.ec2-share-ebs-snapshot You will get an output similar to: 2022/01/18 22:32:11 Checking your authentication against the AWS API 2022/01/18 22:32:12 Warming up aws.exfiltration.ec2-share-ebs-snapshot 2022/01/18 22:32:12 Initializing Terraform 2022/01/18 22:32:19 Applying Terraform 2022/01/18 22:32:43 Sharing the volume snapshot with an external AWS account ID... You can then clean up any leftovers from the technique, which in this case will remove the EBS volume and EBS snapshot: stratus cleanup aws.exfiltration.ec2-share-ebs-snapshot For more information, see Usage , Examples and the Command Reference .","title":"Sample Usage"},{"location":"user-guide/getting-started/#connecting-to-your-cloud-account","text":"Stratus Red Team currently supports only AWS. In order to use Stratus attack techniques against AWS, you need to be authenticated prior to running it, for instance: Using aws-vault Using static credentials in ~/.aws/config , and setting your desired AWS profile using export AWS_PROFILE=my-profile Warning Stratus Red Team is supposed to be used against a sandbox cloud account that does not handle production workloads or infrastructure. Encountering issues? See our troubleshooting page, or open an issue . While Stratus Red Team uses Terraform under the hood, it doesn't mess with your current Terraform install nor does it require you to install Terraform as a prerequisite. Stratus Red Team will download its own Terraform binary in $HOME/.stratus-red-team . \u21a9","title":"Connecting to your cloud account"},{"location":"user-guide/programmatic-usage/","text":"Programmatic Usage Stratus Red Team is mainly used from the CLI, but you can use it programmatically as well! Use-cases include automation, and creating your own attack techniques. Info When using Stratus Red Team programmatically, it will persist its state just like when using the CLI. So for instance, if you warm up a specific attack technique programmatically, running stratus status will show the technique is in WARM state. Installing Stratus Red Team as a dependency Run: go get github.com/datadog/stratus-red-team go get -d Example usage See https://github.com/DataDog/stratus-red-team/tree/main/examples","title":"Programmatic Usage"},{"location":"user-guide/programmatic-usage/#programmatic-usage","text":"Stratus Red Team is mainly used from the CLI, but you can use it programmatically as well! Use-cases include automation, and creating your own attack techniques. Info When using Stratus Red Team programmatically, it will persist its state just like when using the CLI. So for instance, if you warm up a specific attack technique programmatically, running stratus status will show the technique is in WARM state.","title":"Programmatic Usage"},{"location":"user-guide/programmatic-usage/#installing-stratus-red-team-as-a-dependency","text":"Run: go get github.com/datadog/stratus-red-team go get -d","title":"Installing Stratus Red Team as a dependency"},{"location":"user-guide/programmatic-usage/#example-usage","text":"See https://github.com/DataDog/stratus-red-team/tree/main/examples","title":"Example usage"},{"location":"user-guide/troubleshooting/","text":"Troubleshooting \" You are not authenticated against AWS, or you have not set your region. \" You must be authenticated to AWS before running Stratus Red Team. Typically, you must be able to run aws sts get-caller-identity in your shell before running Stratus Red Team. \" The argument \"region\" is required, but no definition was found \" This is a Terraform error indicating you did not set AWS_REGION . Set it using: export AWS_REGION = us-east-1","title":"Troubleshooting"},{"location":"user-guide/troubleshooting/#troubleshooting","text":"","title":"Troubleshooting"},{"location":"user-guide/troubleshooting/#you-are-not-authenticated-against-aws-or-you-have-not-set-your-region","text":"You must be authenticated to AWS before running Stratus Red Team. Typically, you must be able to run aws sts get-caller-identity in your shell before running Stratus Red Team.","title":"\"You are not authenticated against AWS, or you have not set your region.\""},{"location":"user-guide/troubleshooting/#the-argument-region-is-required-but-no-definition-was-found","text":"This is a Terraform error indicating you did not set AWS_REGION . Set it using: export AWS_REGION = us-east-1","title":"\"The argument \"region\" is required, but no definition was found\""},{"location":"user-guide/usage/","text":"Usage List available TTPs using: # List all techniques stratus list # List all persistence techniques stratus list --mitre-attack-tactic persistence # List all AWS tactics stratus list --platform aws View the detail of a specific technique: $ stratus show aws.exfiltration.ec2-share-ebs-snapshot Exfiltrates an EBS snapshot by sharing it with an external AWS account. Warm-up: Creates an EBS volume and a snapshot. Detonation: Calls ModifySnapshotAttribute to share the snapshot. Detonate an attack technique using: stratus detonate aws.exfiltration.ec2-share-ebs-snapshot This will handle warm-up and detonation (but not clean-up - explicitly use --clean-up for this). Alternatively, you can handle warm-up and detonation independently: stratus warmup aws.exfiltration.ec2-share-ebs-snapshot stratus detonate aws.exfiltration.ec2-share-ebs-snapshot Cleanup can be done through: stratus cleanup aws.exfiltration.ec2-share-ebs-snapshot At any time, you can view the state of the TTPs: stratus status +------------------------------------------------------------+-----------+ | TECHNIQUE | STATUS | +------------------------------------------------------------+-----------+ | aws.exfiltration.ec2-share-ebs-snapshot | WARM | | aws.persistence.iam-backdoor-user | DETONATED | | aws.persistence.iam-backdoor-role | WARM | | aws.persistence.iam-create-admin-user | COLD | +------------------------------------------------------------+-----------+","title":"Usage"},{"location":"user-guide/usage/#usage","text":"List available TTPs using: # List all techniques stratus list # List all persistence techniques stratus list --mitre-attack-tactic persistence # List all AWS tactics stratus list --platform aws View the detail of a specific technique: $ stratus show aws.exfiltration.ec2-share-ebs-snapshot Exfiltrates an EBS snapshot by sharing it with an external AWS account. Warm-up: Creates an EBS volume and a snapshot. Detonation: Calls ModifySnapshotAttribute to share the snapshot. Detonate an attack technique using: stratus detonate aws.exfiltration.ec2-share-ebs-snapshot This will handle warm-up and detonation (but not clean-up - explicitly use --clean-up for this). Alternatively, you can handle warm-up and detonation independently: stratus warmup aws.exfiltration.ec2-share-ebs-snapshot stratus detonate aws.exfiltration.ec2-share-ebs-snapshot Cleanup can be done through: stratus cleanup aws.exfiltration.ec2-share-ebs-snapshot At any time, you can view the state of the TTPs: stratus status +------------------------------------------------------------+-----------+ | TECHNIQUE | STATUS | +------------------------------------------------------------+-----------+ | aws.exfiltration.ec2-share-ebs-snapshot | WARM | | aws.persistence.iam-backdoor-user | DETONATED | | aws.persistence.iam-backdoor-role | WARM | | aws.persistence.iam-create-admin-user | COLD | +------------------------------------------------------------+-----------+","title":"Usage"},{"location":"user-guide/commands/","text":"Commands reference list status show warmup detonate revert cleanup","title":"Commands reference"},{"location":"user-guide/commands/#commands-reference","text":"list status show warmup detonate revert cleanup","title":"Commands reference"},{"location":"user-guide/commands/cleanup/","text":"stratus cleanup Cleans up any leftover infrastructure from an attack technique. Sample Usage Clean up an attack technique stratus cleanup aws.defense-evasion.cloudtrail-stop Clean up all attack techniques that can be cleaned up stratus cleanup --all Difference with status revert stratus revert is about reverting the side effects of a detonation. In addition to reverting an attack technique, stratus cleanup also takes care of removing all prerequisite infrastructure from your live environment.","title":"cleanup"},{"location":"user-guide/commands/cleanup/#stratus-cleanup","text":"Cleans up any leftover infrastructure from an attack technique.","title":"stratus cleanup"},{"location":"user-guide/commands/cleanup/#sample-usage","text":"Clean up an attack technique stratus cleanup aws.defense-evasion.cloudtrail-stop Clean up all attack techniques that can be cleaned up stratus cleanup --all","title":"Sample Usage"},{"location":"user-guide/commands/cleanup/#difference-with-status-revert","text":"stratus revert is about reverting the side effects of a detonation. In addition to reverting an attack technique, stratus cleanup also takes care of removing all prerequisite infrastructure from your live environment.","title":"Difference with status revert"},{"location":"user-guide/commands/detonate/","text":"stratus detonate Detonates an attack technique. If the technique was previously warmed up using stratus warmup , it will not be warmed up again. Otherwise, stratus detonate will automatically warm up the technique before detonating it. Sample Usage Detonate an attack technique stratus detonate aws.exfiltration.s3-backdoor-bucket-policy Detonate multiple attack techniques stratus detonate aws.exfiltration.s3-backdoor-bucket-policy aws.defense-evasion.cloudtrail-stop Detonate an attack technique, then automatically clean up any resources deployed on AWS stratus detonate aws.exfiltration.s3-backdoor-bucket-policy --cleanup","title":"detonate"},{"location":"user-guide/commands/detonate/#stratus-detonate","text":"Detonates an attack technique. If the technique was previously warmed up using stratus warmup , it will not be warmed up again. Otherwise, stratus detonate will automatically warm up the technique before detonating it.","title":"stratus detonate"},{"location":"user-guide/commands/detonate/#sample-usage","text":"Detonate an attack technique stratus detonate aws.exfiltration.s3-backdoor-bucket-policy Detonate multiple attack techniques stratus detonate aws.exfiltration.s3-backdoor-bucket-policy aws.defense-evasion.cloudtrail-stop Detonate an attack technique, then automatically clean up any resources deployed on AWS stratus detonate aws.exfiltration.s3-backdoor-bucket-policy --cleanup","title":"Sample Usage"},{"location":"user-guide/commands/list/","text":"stratus list Sample Usage List all available attack techniques stratus list List available attack techniques for AWS stratus list --platform aws List available attack techniques for the MITRE ATT&CK 'persistence' tactic stratus list --platform aws --mitre-attack-tactic persistence","title":"list"},{"location":"user-guide/commands/list/#stratus-list","text":"","title":"stratus list"},{"location":"user-guide/commands/list/#sample-usage","text":"List all available attack techniques stratus list List available attack techniques for AWS stratus list --platform aws List available attack techniques for the MITRE ATT&CK 'persistence' tactic stratus list --platform aws --mitre-attack-tactic persistence","title":"Sample Usage"},{"location":"user-guide/commands/revert/","text":"stratus revert Reverts the detonation of an attack technique, when applicable. Some attack techniques are not idempotent , meaning that you cannot detonate them multiple times because of their side effect. For instance, Stop a CloudTrail Trail stops a CloudTrail Trail when detonated. Consequently, it cannot be detonated again (as the Trail is already stopped). stratus revert ensures that a non-idempotent technique is reverted to a state where it can be detonated again. Sample Usage Revert an attack technique stratus revert aws.persistence.lambda-backdoor-function Difference with stratus cleanup stratus cleanup both reverts an attack technique, and removes any deployed prerequisite infrastructure from your live environment.","title":"revert"},{"location":"user-guide/commands/revert/#stratus-revert","text":"Reverts the detonation of an attack technique, when applicable. Some attack techniques are not idempotent , meaning that you cannot detonate them multiple times because of their side effect. For instance, Stop a CloudTrail Trail stops a CloudTrail Trail when detonated. Consequently, it cannot be detonated again (as the Trail is already stopped). stratus revert ensures that a non-idempotent technique is reverted to a state where it can be detonated again.","title":"stratus revert"},{"location":"user-guide/commands/revert/#sample-usage","text":"Revert an attack technique stratus revert aws.persistence.lambda-backdoor-function","title":"Sample Usage"},{"location":"user-guide/commands/revert/#difference-with-stratus-cleanup","text":"stratus cleanup both reverts an attack technique, and removes any deployed prerequisite infrastructure from your live environment.","title":"Difference with stratus cleanup"},{"location":"user-guide/commands/show/","text":"stratus show Sample Usage Display more information about an attack technique stratus show aws.credential-access.ec2-steal-instance-credentials","title":"show"},{"location":"user-guide/commands/show/#stratus-show","text":"","title":"stratus show"},{"location":"user-guide/commands/show/#sample-usage","text":"Display more information about an attack technique stratus show aws.credential-access.ec2-steal-instance-credentials","title":"Sample Usage"},{"location":"user-guide/commands/status/","text":"stratus status Displays the current state of the attack techniques. See: Stratus Red Team attack technique states Sample Usage List the current state of available attack techniques stratus status Sample output +------------------------------------------------------------+--------------------------------------------------------+-------------+ | ID | NAME | STATUS | +------------------------------------------------------------+--------------------------------------------------------+-------------+ | aws.defense-evasion.cloudtrail-stop | Stop a CloudTrail Trail | WARM | | aws.defense-evasion.organizations-leave | Attempt to Leave the AWS Organization | COLD | | aws.defense-evasion.vpc-remove-flow-logs | Remove VPC Flow Logs | WARM | | aws.persistence.iam-backdoor-user | Create an Access Key on an IAM User | DETONATED | +------------------------------------------------------------+--------------------------------------------------------+-------------+","title":"status"},{"location":"user-guide/commands/status/#stratus-status","text":"Displays the current state of the attack techniques. See: Stratus Red Team attack technique states","title":"stratus status"},{"location":"user-guide/commands/status/#sample-usage","text":"List the current state of available attack techniques stratus status","title":"Sample Usage"},{"location":"user-guide/commands/status/#sample-output","text":"+------------------------------------------------------------+--------------------------------------------------------+-------------+ | ID | NAME | STATUS | +------------------------------------------------------------+--------------------------------------------------------+-------------+ | aws.defense-evasion.cloudtrail-stop | Stop a CloudTrail Trail | WARM | | aws.defense-evasion.organizations-leave | Attempt to Leave the AWS Organization | COLD | | aws.defense-evasion.vpc-remove-flow-logs | Remove VPC Flow Logs | WARM | | aws.persistence.iam-backdoor-user | Create an Access Key on an IAM User | DETONATED | +------------------------------------------------------------+--------------------------------------------------------+-------------+","title":"Sample output"},{"location":"user-guide/commands/warmup/","text":"stratus warmup \"Warm up\" an attack technique by spinning up the prerequisite infrastructure or configuration, without detonating it. For example, the attack technique Exfiltrate an AMI by Sharing It needs an AMI before the detonation phase can detonate the attack, and share it with an external AWS account. Sample Usage Warm up an attack technique stratus warmup aws.exfiltration.ec2-share-ami Warm up multiple attack techniques stratus warmup aws.exfiltration.ec2-share-ami aws.exfiltration.s3-backdoor-bucket-policy (advanced) Warm up again an attack technique that was already WARM, to ensure its prerequisites are met stratus warmup aws.exfiltration.ec2-share-ami --force","title":"warmup"},{"location":"user-guide/commands/warmup/#stratus-warmup","text":"\"Warm up\" an attack technique by spinning up the prerequisite infrastructure or configuration, without detonating it. For example, the attack technique Exfiltrate an AMI by Sharing It needs an AMI before the detonation phase can detonate the attack, and share it with an external AWS account.","title":"stratus warmup"},{"location":"user-guide/commands/warmup/#sample-usage","text":"Warm up an attack technique stratus warmup aws.exfiltration.ec2-share-ami Warm up multiple attack techniques stratus warmup aws.exfiltration.ec2-share-ami aws.exfiltration.s3-backdoor-bucket-policy (advanced) Warm up again an attack technique that was already WARM, to ensure its prerequisites are met stratus warmup aws.exfiltration.ec2-share-ami --force","title":"Sample Usage"}]}